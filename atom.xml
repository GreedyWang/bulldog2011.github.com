<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Abstraction Builder]]></title>
  <link href="http://bulldog2011.github.com/atom.xml" rel="self"/>
  <link href="http://bulldog2011.github.com/"/>
  <updated>2013-03-25T17:20:04+08:00</updated>
  <id>http://bulldog2011.github.com/</id>
  <author>
    <name><![CDATA[Bulldog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fanout queue tutorial]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/03/25/fanout-queue-tutorial/"/>
    <updated>2013-03-25T15:34:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/03/25/fanout-queue-tutorial</id>
    <content type="html"><![CDATA[<p>This is a tutorial to show the basic API usage of fanout queue, the source of this tutorial is <a href="https://github.com/bulldog2011/bigqueue/blob/master/src/test/java/com/leansoft/bigqueue/tutorial/FanOutQueueTutorial.java">here</a>.</p>

<p>Why we need a queue with fanout semantics? here is a typical case:
Suppose we have a queue for log collecting, at the backend, we have two(or more) use cases of the log data, for example, one use case is real-time log analysis and alerting, another use case is offline log analysis and reporting, in these cases, we will have two(or more) independent consumers, such as one real-time log consumer and one offline log consumer, but we only have one queue, if we just use a typical queue, then it only supports one consumer(this is called consume once semantics), the data consumed by one consumer will not be available to other consumer(s) again. One solution to this problem is to create two(or more) queues for each consumer, and let producers produce messages into all these queues, but this is a silly and bandwidth/storage cost solution. A more elegant solution is to add fanout semantics to the queue - one queue can be independently consumed by multiple consumers, internally, fanout queue will maintain queue front pointers for multiple consumers. The fanout queue in the bigqueue library supports fanout semantics, it also supports a group consuming scenario - multiple consumers form a group(use same fanout id) to consume a queue concurrently for higher consuming throughput.</p>

<!--more-->


<p>Below is figure visually show the fanout semantics:</p>

<p><img class="center" src="http://bulldog2011.github.com/images/bigqueue/fanout-queue.png" width="300" height="300"></p>

<p>The interface of fanout queue is <a href="https://github.com/bulldog2011/bigqueue/blob/master/src/main/java/com/leansoft/bigqueue/IFanOutQueue.java">here</a>.</p>

<p>You can create(initialize) a new fanout queue in just one statement:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// create a new fanout queue</span>
</span><span class='line'><span class="n">IFanOutQueue</span> <span class="n">foQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FanOutQueueImpl</span><span class="o">(</span><span class="s">&quot;d:/tutorial/fanout-queue&quot;</span><span class="o">,</span> <span class="s">&quot;demo&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>the first parameter is a directory you want to store the queue data file, the second parameter is the queue name. Now you have a reference to an empty queue.</p>

<p>At producing side, fanout queue is the same as typical queue, to add or produce item into the queue, you just call the <strong><em>enqueue</em></strong> method on the queue reference, here we enqueue 10 logs into the queue:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// enqueue some logs</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">log</span> <span class="o">=</span> <span class="s">&quot;log-&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>  <span class="n">foQueue</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Note:</em></strong> the enqueue method only accept byte array data as input, if your object is not byte array data, you are responsible to convert your object into byte array first before enqueue, this is called serialization, when you dequeue later, you are also response to de-serialize the byte array data into your object format.</p>

<p>Now let&#8217;s see the fanout semantics, to consume from a fanout queue, you need to provide a fanout id to uniquely identify the fanout queue, then call the <strong><em>dequeue</em></strong> method with fanout id as parameter, below we use a fanout id called &#8216;realtime&#8217; to consume all logs in the &#8216;realtime&#8217; fanout queue(&#8216;realtime&#8217; is just a logic name, there is only one physical underlying queue):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// consuming the queue with fanoutId 1</span>
</span><span class='line'><span class="n">String</span> <span class="n">fanoutId1</span> <span class="o">=</span> <span class="s">&quot;realtime&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;output from &quot;</span> <span class="o">+</span> <span class="n">fanoutId1</span> <span class="o">+</span> <span class="s">&quot; consumer:&quot;</span><span class="o">);</span>
</span><span class='line'><span class="k">while</span><span class="o">(!</span><span class="n">foQueue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">fanoutId1</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">foQueue</span><span class="o">.</span><span class="na">dequeue</span><span class="o">(</span><span class="n">fanoutId1</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>below is the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output from realtime consumer
</span><span class='line'>log-0
</span><span class='line'>log-1
</span><span class='line'>log-2
</span><span class='line'>log-3
</span><span class='line'>log-4
</span><span class='line'>log-5
</span><span class='line'>log-6
</span><span class='line'>log-7
</span><span class='line'>log-8
</span><span class='line'>log-9</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s suppose there is another consumer called &#8216;offline&#8217;, to consume all logs in the &#8216;offline&#8217; fanout queue, we just use similar consuming logic:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="c1">// consuming the queue with fanoutId 2</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">fanoutId2</span> <span class="o">=</span> <span class="s">&quot;offline&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;output from &quot;</span> <span class="o">+</span> <span class="n">fanoutId2</span> <span class="o">+</span> <span class="s">&quot; consumer:&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">while</span><span class="o">(!</span><span class="n">foQueue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">fanoutId2</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">foQueue</span><span class="o">.</span><span class="na">dequeue</span><span class="o">(</span><span class="n">fanoutId2</span><span class="o">));</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only difference is now we use &#8216;offline&#8217; as fanout id instead of &#8216;realtime&#8217;, below is the output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>output from offline consumer
</span><span class='line'>log-0
</span><span class='line'>log-1
</span><span class='line'>log-2
</span><span class='line'>log-3
</span><span class='line'>log-4
</span><span class='line'>log-5
</span><span class='line'>log-6
</span><span class='line'>log-7
</span><span class='line'>log-8
</span><span class='line'>log-9</span></code></pre></td></tr></table></div></figure>


<p>By comparing the output, you can see that both &#8216;realtime&#8217; consumer and &#8216;offline&#8217; consumer can consume one queue independently.</p>

<p>Finally, when you finish with the queue, just call <strong><em>close</em></strong> method to release resource used by the queue, this is not mandatory, just a best practice, call close will release part of used memory immediately. Usually, you initialize big queue in a try block and close it in the finally block, here is the usage paradigm:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// typical queue initialization and closing paradigm</span>
</span><span class='line'><span class="n">IFanOutQueue</span> <span class="n">foQueue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">foQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FanOutQueueImpl</span><span class="o">(</span><span class="s">&quot;d:/tutorial/fanout-queue&quot;</span><span class="o">,</span> <span class="s">&quot;demo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">foQueue</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">foQueue</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, currently, the fantout queue provided by bigqueue library does not limit the number of fanout queues, in other word, one queue can support arbitrary fanout consumers, as long as all consuemr are using unique fanout ids.</p>

<p>Fanout is a very powerful queue sementics, in a last project, we successfully used one log queue to support 3 kinds of log consumers:</p>

<ol>
<li>realtime consumer, filter and store log events in in-memory db for real-time event alerting.</li>
<li>near-realtime consumer, store logs in HBase for daily log search and analysis.</li>
<li>offline consumer, store logs in Hadoop for long term analysis and reporting.</li>
</ol>


<p>Sometimes, one consumer is not enough to keep up the speed of the producers, in such case, we can let multiple consumers(may host on same machines or multiple machines) to form a consumer group(the consumer in the same consumer group will use same fanout id), this will tremendously improve the consuming throughput.</p>

<p>The fanout queue provided in the bigqueue library also provides methods to clean up expired back data files or to limit the total size of the back data files, please see the interface and unit tests for details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schema driven web service client development on Android, Part 2: eBay Search App]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/19/schema-driven-on-android-part-2-ebay-search/"/>
    <updated>2013-02-19T20:47:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/19/schema-driven-on-android-part-2-ebay-search</id>
    <content type="html"><![CDATA[<p>This is the second part of my schema driven web service client development on Android series, in <a href="http://bulldog2011.github.com/blog/2013/02/17/schema-driven-on-android-part-1-hello-ebay-finding/">part one</a>, I introduced the blueprint of scheam driven development on Android, then I created a web service client proxy for eBay Finding API and built a minimum App as demo. In this second part, I will continue to create a functional eBay search app on Android by leveraging the proxy created in part one.</p>

<!--more-->


<p>There is a <a href="http://huguesjohnson.com/programming/java/android-ebay/">good post</a> showing how to integrate Android Application with the eBay API, the author did a very good job, the steps are shown in great detail, this is definitely the recommended reading if you want to develop eBay API based application on Android, however, the author created the application with much low-level passing and plumbing code, there are at least three problems with such approach:<br/>
1. The effort to create such simple application is nontrival, this is enough to scare away average developers.<br/>
2. The application is hard to maintain, whenever eBay changes some API interface, much effort is needed to rewrite and debug the json parsing code.<br/>
3. The application is hard to scale, if more functions and more API calls are needed, much effort is needed to write additional parsing and calling code.</p>

<p>I&#8217;ve created a similar application without much effort, I just leveraged the proxy code base created in part one of this series and focused my effort on writing some application logic and UI code. In fact, since I don&#8217;t get troubled in backend parsing and plumbing code, I can write far less code than the above mentioned author, this is the power of scheam driven or proxy driven development, below is the main UI of the finished application.</p>

<p><img class="center" src="http://bulldog2011.github.com/images/nano-rest/ebay_search.png" width="400" height="600"></p>

<p>I won&#8217;t post much code here since this is a typical andorid application and the code of the whole application is quite self explanatory, you can download the whole application <a href="https://github.com/bulldog2011/nano-rest/tree/master/sample/EBaySearch">here</a></p>

<p>Let me drop a few notes about this application here:</p>

<ol>
<li>The application uses the FindItemsByKeywords request processor built in part 1, and the API call follows the same paradigm shown in part 1.</li>
<li>This is a typical eBay search application, there is only one <a href="https://github.com/bulldog2011/nano-rest/blob/master/sample/EBaySearch/src/com/leansoft/nanorest/sample/FindingActivity.java">main activity</a> which extends ListActivity, user input a search keyword and click search, the application calls the FindItemsByKeywords request processor with asynchronous callback specified, inside the callback, UI is updated by populating the list view with search result items, not much code in the main activity.</li>
<li><a href="https://github.com/mttkay/droid-fu/blob/master/src/main/java/com/github/droidfu/widgets/WebImageView.java">Droidfu WebImageView</a> component is used to shown ebay item gallary thumbnail image, note, I removed the cache part of the component to minimize the code base, in real application, image cache is required for better performance.</li>
<li>I&#8217;ve added a dynamic sliding with pagination feature which makes the applciation look cool and friendly.</li>
<li>Before you run the application, please don&#8217;t forget to fill your <strong><em>APP NAME</em></strong> in the <a href="https://github.com/bulldog2011/nano-rest/blob/master/sample/EBaySearch/src/com/ebay/finding/auth/AppNameAuthenticationProvider.java">AppNameAuthenticationProvider class</a>.</li>
</ol>


<p>With the eBay Finding API proxy as SDK and the sample app as template, it&#8217;s not hard for you to create a more functional eBay Finding App on Android, I am looking forward that someone will build one, and let me know when you build one.</p>

<p>Let me reinterate three main <strong><em>highhights</em></strong> of scheam driven development on Android:</p>

<ol>
<li>Development effort is minimized, focus on application and UI logic instead of low level plumbling code.</li>
<li>Easy to maintain and scale, whenever the schema changes, resynchronize the proxy with the new schema and update application and UI logic accordingly, no manual xml parsing and debugging anymore.</li>
<li>Better quality and reliability, code generation and component resue foster better software quality and reliability.</li>
</ol>


<h4>Update 1 (2.23.2013)</h4>

<p>The eBay Search App has been enhanced to show how to mix API calls in one App:</p>

<ol>
<li>Search eBay using eBay Finding <a href="http://developer.ebay.com/DevZone/finding/CallRef/findItemsByKeywords.html">FindItemsByKeywords</a> API.</li>
<li>Show item details using eBay Shopping <a href="http://developer.ebay.com/DevZone/shopping/docs/CallRef/GetSingleItem.html">GetSingleItem</a> API.</li>
<li>Add item to watch list using eBay Trading <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/AddToWatchList.html">AddToWatchList</a> API</li>
</ol>


<p>below is the item details UI:</p>

<p><img class="center" src="http://bulldog2011.github.com/images/nano-rest/ebay_demo.png" width="400" height="600"></p>

<p>Now with eBay Finding/Shopping/Trading API proxy as SDK and the demo app as template, you may create whatever eBay application you can think of, just let loose your imagination!</p>

<p>You can get the whole source of the enhanced App <a href="https://github.com/bulldog2011/nano-rest/tree/master/sample/EBayDemo">here</a>, Note, before you run the App, please fill in your eBay AppId and auth token in the <a href="https://github.com/bulldog2011/nano-rest/blob/master/sample/EBayDemo/src/com/leansoft/nanorest/sample/ConfigFactory.java">ConfigFactory</a> class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schema driven web service client development on Android, Part 1: Hello eBay Finding]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/17/schema-driven-on-android-part-1-hello-ebay-finding/"/>
    <updated>2013-02-17T12:48:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/17/schema-driven-on-android-part-1-hello-ebay-finding</id>
    <content type="html"><![CDATA[<p>Scheam driven web service development is quite popular in Java world, JAXB and JAX-WS are both mature standard, and frameworks like CXF, Axis are famous amount many developers for fast service development. It&#8217;s common to do scheam driven developent on server side, can scheam driven client development be done on Android? Yes, it can. Today I will show you how do do scheam driven development on Android by leveraging following light-weight frameworks:</p>

<!--more-->


<blockquote><ol>
<li><a href="https://github.com/bulldog2011/nano-rest">Nano-rest</a> restful client framework for Android, with Nano xml binding support.</li>
<li><a href="https://github.com/bulldog2011/mxjc">mxjc</a> scheam to Android java binding compiler.</li>
</ol>
</blockquote>

<p>The serivce I choose for demo is <a href="https://www.x.com/developers/ebay/products/finding-api">eBay Finding service</a>, here are why I choose this service:</p>

<blockquote><ol>
<li>I have some direct experience with this service.</li>
<li>eBay Finding serivce supports schema driven development since it provides a wsdl, at the same time, it also supports RESTful style service call.</li>
</ol>
</blockquote>

<p>If you are not familar with this serivce, please visit its <a href="https://www.x.com/developers/ebay/products/finding-api">official site</a>.</p>

<h3>The Big Picture</h3>

<p><img class="center" src="http://bulldog2011.github.com/images/nano-rest/big_picture.png" width="600" height="800"></p>

<p>The picture above is the blueprint of scheam driven development on Android. The left part of the blueprint is a build time view, here we leverage mxjc binding compiler to automatically generate service or domain classes from scheam or wsdl; The right part of the blueprint is a runtime view, a typical flow starts from your Android app, it issues request object on proxy component, the proxy passes the request to the Nano restful framework which will delegate the object to xml marshalling work to Nano binding framework and send the xml request to external service through HTTP transportation component, when an xml resposne is received by the HTTP transportation component, the Nano restful framework will also delegate the xml to object unmarshalling work to Nano binding framework and passes the response object to the proxy which will return the response object back to the calling app.</p>

<p>Let&#8217;s follow the blueprint and build a simple Android app step by step:</p>

<h3>Step 1 : Generate service classes from schema</h3>

<p>The first step of scheam driven development is to generate service classes from schema or wsdl, let&#8217;s download eBay Finding serivce wsdl <a href="http://developer.ebay.com/webservices/finding/latest/FindingService.wsdl">here</a>, also, let&#8217;s download <a href="https://github.com/bulldog2011/mxjc">mxjc binding compiler</a> zip package by following links on the github site, extract the zip package, suppose we put the wsdl in the same folder as the extracted zip package, then we execute command(suppose we are in Windows environment, Unix environment will be similar).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin\mxjc.bat -wsdl FindingService.wsdl</span></code></pre></td></tr></table></div></figure>


<p>When we execute this command, the schema inside the wsdl will be parsed by the binding compiler and Nano bindable classes will be generated, by default, the binding compiler will derive package name from wsdl, but you can override this by providing custom package name directly as command line options.
&#8216;-wsdl&#8217; option is needed since we are generating from wsdl, not default xsd. <br/>
By default, the service classes will be generated in the current directory.</p>

<h3>Step 2: Create a New Android Project</h3>

<p>Now let&#8217;s create a new Android project in IDE like Eclipse with ADT installed, to use Nano-rest client framework, the Android API version must be equal to or newer than 7(Androdi 2.1 or above), this is required since Nano-rest leverages Android Service mechanism for asynchronous service invocation.</p>

<p>With new Android project created, let&#8217;s add Nano-rest jar in the <strong><em>libs</em></strong> folder of the project, the Nano-rest jar can be downloaded by following link on the <a href="https://github.com/bulldog2011/nano-rest">Nano-rest github site</a>, the shaded jar is preferred since it already includes Nano xml binding framework dependency, otherwise, you have to add Nano xml binding framework jar separately.
Now, let&#8217;s copy the above generated service classes into the <strong><em>src</em></strong> folder the project, if we refresh the project, there should be no compiling error since all imports in the generated classes can be resolved by the Nano-rest shaded jar reference.</p>

<p>To let Nano-rest framework work correctly at runtime, we <strong><em>must</em></strong> added following declarations in the manifest file of the project:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>  <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;uses-sdk</span> <span class="na">android:minSdkVersion=</span><span class="s">&quot;7&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;application&gt;</span>
</span><span class='line'>    <span class="nt">&lt;service</span> <span class="na">android:name=</span><span class="s">&quot;com.leansoft.nanorest.service.HTTPRequestExecutorService&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/service&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/application&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The uses-permission declaration is needed for internet access, the minSdkVersion declaration has be explained above, and the HTTPRequestExecutorService class is required for asynchronous service invocation, synchronous service invocation may block Android main UI, leading to process crash, this is not expected, so as a best practice, we should always invoke service asynchronously on Android.</p>

<h3>Step 3 : Create eBay Finding API Proxy</h3>

<p>Web service client proxy can simplify service invocation code, usually, web serivce framework like CXF or JAX-WS has tool to auto-generate service proxy from wsdl, however, current mxjc binding compiler does not support proxy generation yet(it can only generate service classes from schema), but it&#8217;s not hard for us to write proxy class manually since Nano-rest has already encapsulated generic service invocation logic for us, we only need to extend it and add a few service specific logic, let&#8217;s just do it:</p>

<p>First, let&#8217;s definite some constants which will be used later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ebay</span><span class="o">.</span><span class="na">finding</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FindingConstants</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">PRODUCTION_ENDPOINT</span> <span class="o">=</span> <span class="s">&quot;http://svcs.ebay.com/services/search/FindingService/v1&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">SANDBOX_ENDPOINT</span> <span class="o">=</span> <span class="s">&quot;http://svcs.sandbox.ebay.com/services/search/FindingService/v1&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">X_EBAY_SOA_OPERATION_NAME</span> <span class="o">=</span> <span class="s">&quot;X-EBAY-SOA-OPERATION-NAME&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">X_EBAY_SOA_SECURITY_APPNAME</span> <span class="o">=</span> <span class="s">&quot;X-EBAY-SOA-SECURITY-APPNAME&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>These constants are quite self explanatory, so I won&#8217;t give more comments.</p>

<p>Then we build a simple authentication class, eBay Finding serivce need a <strong><em>APP NAME</em></strong> as one of http request headers, so we just add it,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ebay</span><span class="o">.</span><span class="na">finding</span><span class="o">.</span><span class="na">auth</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.finding.FindingConstants</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.auth.AuthenticationProvider</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.client.BaseRestClient</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppNameAuthenticationProvider</span> <span class="kd">implements</span> <span class="n">AuthenticationProvider</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">authenticateRequest</span><span class="o">(</span><span class="n">BaseRestClient</span> <span class="n">client</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="n">FindingConstants</span><span class="o">.</span><span class="na">X_EBAY_SOA_SECURITY_APPNAME</span><span class="o">,</span> <span class="s">&quot;YOUR_APPNAME_HERE&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Note</em></strong>, before you can run the final finished application, you mush replace the APP NAME placeholder with your own eBay developer APP NAME which can be applied on eBay developer site.</p>

<p>Next, let&#8217;s build a generic request processor for eBay Finding serivce, with this base request processor, all specific request processors(supported by eBay Finding service) can be easily built later, let&#8217;s see the full definition of this base request processor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ebay</span><span class="o">.</span><span class="na">finding</span><span class="o">.</span><span class="na">request</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.finding.FindingConstants</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.finding.auth.AppNameAuthenticationProvider</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.AckValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.BaseServiceResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.ErrorMessage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.callback.HttpCallback</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.client.RestClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.domain.ResponseStatus</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.logger.ALog</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.parser.NanoXmlResponseParser</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.request.NanoXmlRequestProcessor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseFindingRequestProcessor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">NanoXmlRequestProcessor</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">responseType</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">BaseFindingRequestProcessor</span><span class="o">(</span><span class="n">Object</span> <span class="n">requestObject</span><span class="o">,</span> <span class="n">String</span> <span class="n">opName</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">responseType</span><span class="o">,</span>
</span><span class='line'>          <span class="n">HttpCallback</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">requestObject</span><span class="o">,</span>
</span><span class='line'>            <span class="n">responseType</span><span class="o">,</span>
</span><span class='line'>            <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">responseType</span> <span class="o">=</span> <span class="n">responseType</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      
</span><span class='line'>      <span class="n">RestClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">getRestClient</span><span class="o">();</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="n">FindingConstants</span><span class="o">.</span><span class="na">PRODUCTION_ENDPOINT</span><span class="o">);</span>
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">setAuthentication</span><span class="o">(</span><span class="k">new</span> <span class="n">AppNameAuthenticationProvider</span><span class="o">());</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">client</span><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="n">FindingConstants</span><span class="o">.</span><span class="na">X_EBAY_SOA_OPERATION_NAME</span><span class="o">,</span>  <span class="n">opName</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">NanoXmlResponseParser</span><span class="o">&lt;</span><span class="n">ErrorMessage</span><span class="o">&gt;</span> <span class="n">errorMessageParser</span> <span class="o">=</span>
</span><span class='line'>          <span class="k">new</span> <span class="n">NanoXmlResponseParser</span><span class="o">&lt;</span><span class="n">ErrorMessage</span><span class="o">&gt;(</span><span class="n">ErrorMessage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">handleResponse</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>        <span class="kd">final</span> <span class="n">RestClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">getRestClient</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">ResponseStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">getResponseStatus</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">getResponse</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ALog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">status</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">status</span><span class="o">.</span><span class="na">getStatusCode</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">200</span> <span class="o">||</span> <span class="n">status</span><span class="o">.</span><span class="na">getStatusCode</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="mi">300</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">isXmlResponse</span><span class="o">(</span><span class="n">response</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">parseErrorMessage</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">getResponseHandler</span><span class="o">().</span><span class="na">handleError</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">parseHttpResponse</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">parseErrorMessage</span><span class="o">(</span><span class="n">String</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">ErrorMessage</span> <span class="n">errorMessage</span> <span class="o">=</span> <span class="n">errorMessageParser</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">T</span> <span class="n">responeData</span> <span class="o">=</span> <span class="n">responseType</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>            <span class="n">BaseServiceResponse</span> <span class="n">baseServiceResponse</span> <span class="o">=</span> <span class="o">(</span><span class="n">BaseServiceResponse</span><span class="o">)</span><span class="n">responeData</span><span class="o">;</span>
</span><span class='line'>            <span class="n">baseServiceResponse</span><span class="o">.</span><span class="na">setAck</span><span class="o">(</span><span class="n">AckValue</span><span class="o">.</span><span class="na">FAILURE</span><span class="o">);</span>
</span><span class='line'>            <span class="n">baseServiceResponse</span><span class="o">.</span><span class="na">setErrorMessage</span><span class="o">(</span><span class="n">errorMessage</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">getResponseHandler</span><span class="o">().</span><span class="na">handleSuccess</span><span class="o">(</span><span class="n">responeData</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ResponseStatus</span> <span class="n">responseStatus</span> <span class="o">=</span> <span class="n">ResponseStatus</span><span class="o">.</span><span class="na">getParseErrorStatus</span><span class="o">();</span>
</span><span class='line'>            <span class="n">ALog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">responseStatus</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="n">getResponseHandler</span><span class="o">().</span><span class="na">handleError</span><span class="o">(</span><span class="n">responseStatus</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isXmlResponse</span><span class="o">(</span><span class="n">String</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;&lt;?xml&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Base request processor is the core of the proxy, let me give more comments about the base processor:<br/>
1. we extend NanoXmlRequestProcessor class, since we want to leverage Nano xml framework for request marshalling and response unmarshalling.<br/>
2. In the constuctor, we provides request object, operaion name and
a HttpCallback instance as parameters and delegate these parameters to the super class, the requst object is an eBay Finding request object like FindItemsByKeywordsRequest object, the operation name is required by eBay Finding service as request header, and I will give more explanation about the HttpCallback instance later. <br/>
3. Also in the constructor, we set eBay Finding service production endpoint url on the rest client(replace here if you need to access sandbox instead), plug in authentication provider defined above, and add operation name as request header. Note, authentication provider plugin is not necessary, you can always add APP NAME directly on the rest client as a request header, I use authentication provider here just to show the formal way to do authentication when Nano-rest framework is used.<br/>
4. The response handling logic of the eBay Finding serivce needs a special fix, usually, eBay service supports RRE(resposne resident error), means error message are wrapped in a normal response message, but in some cases, eBay Finding service may return a single error xml message without a wrapping response. In order to fix this, I overrided the Nano-rest response handling logic, please see handleResponse and
parseErrorMessage methods for details.</p>

<p>The responseHandler(defined in super class and returned by getResponseHandler method) is assocated with the HttpCallback instance passed in the constructor, it only has two methods: handleSuccess and handleError, usually, if the service invocation is successful, then handleSuccess method should be called, otherwise, handleError method should be called, responseHandler is only responsilbe for the callback, concrete success or error handling logic is defined by application logic.</p>

<p>With base processor defined, it&#8217;s quite easy to define a specific request processor, let&#8217;s define a FindItemsByKeywordsReqeustProcessor since I will use this function of eBay Finding service as demo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ebay</span><span class="o">.</span><span class="na">finding</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.finding.request.BaseFindingRequestProcessor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.FindItemsByKeywordsRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.FindItemsByKeywordsResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.RequestProcessor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.callback.HttpCallback</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindingService</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="n">FindingService</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getSimpleName</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">RequestProcessor</span> <span class="nf">getFindItemsByKeywordsRequestProcessor</span><span class="o">(</span>
</span><span class='line'>          <span class="n">FindItemsByKeywordsRequest</span> <span class="n">requestObject</span><span class="o">,</span>
</span><span class='line'>          <span class="n">HttpCallback</span><span class="o">&lt;</span><span class="n">FindItemsByKeywordsResponse</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">BaseFindingRequestProcessor</span><span class="o">&lt;</span><span class="n">FindItemsByKeywordsResponse</span><span class="o">&gt;(</span><span class="n">requestObject</span><span class="o">,</span> <span class="s">&quot;findItemsByKeywords&quot;</span><span class="o">,</span> <span class="n">FindItemsByKeywordsResponse</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not much code, and no magic here if you are familar with Java generic. We just define a factory method, provide specific parameters requried by FindItemsByKeywords API call. Use this method as template, it&#8217;s not hard for you to create other request processors, like <br/>
getFindItemsAdvandedRequestProcessor, getFindItemsByCategoryRequestProcessor, etc, all functions of eBay Finding service can be defined in this way, actually, you can even build a complete eBay Finding SDK in this way for later reuse.</p>

<h3>Step 4: Write real application logic and UI</h3>

<p>Now it&#8217;s time for us to write real application logic and UI, in this demo, I just want to show minimum application logic and UI, the UI part only has an EditText as keywords input and a Button to trigger search by calling FindingItemsByKeywords API, and a Toast for response display.
The application logic is even simpler, let&#8217;s see the whole definition of the Main Activity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nanorest</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.finding.FindingService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.AckValue</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.FindItemsByKeywordsRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.FindItemsByKeywordsResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.ebay.marketplace.search.v1.services.PaginationInput</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.RequestProcessor</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.callback.HttpCallback</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nanorest.domain.ResponseStatus</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View.OnClickListener</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.Button</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.Toast</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.EditText</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Button</span> <span class="n">btn</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class='line'>      <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_main</span><span class="o">);</span>
</span><span class='line'>          
</span><span class='line'>        <span class="n">btn</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">btn</span><span class="o">);</span>
</span><span class='line'>        <span class="n">btn</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">String</span> <span class="n">keywords</span> <span class="o">=</span> <span class="o">((</span><span class="n">EditText</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">edit_input</span><span class="o">)).</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>    
</span><span class='line'>              <span class="n">FindItemsByKeywordsRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FindItemsByKeywordsRequest</span><span class="o">();</span>
</span><span class='line'>              <span class="n">request</span><span class="o">.</span><span class="na">setKeywords</span><span class="o">(</span><span class="n">keywords</span><span class="o">);</span>
</span><span class='line'>              <span class="n">PaginationInput</span> <span class="n">pi</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaginationInput</span><span class="o">();</span>
</span><span class='line'>              <span class="n">pi</span><span class="o">.</span><span class="na">setPageNumber</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>              <span class="n">pi</span><span class="o">.</span><span class="na">setEntriesPerPage</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>              <span class="n">request</span><span class="o">.</span><span class="na">setPaginationInput</span><span class="o">(</span><span class="n">pi</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>              <span class="n">RequestProcessor</span> <span class="n">requestProcessor</span> <span class="o">=</span> <span class="n">FindingService</span><span class="o">.</span><span class="na">getFindItemsByKeywordsHttpRequest</span><span class="o">(</span>
</span><span class='line'>                      <span class="n">request</span><span class="o">,</span>
</span><span class='line'>                      <span class="k">new</span> <span class="nf">FindItemsByKeywordsCallback</span><span class="o">()</span>
</span><span class='line'>                      <span class="o">);</span>
</span><span class='line'>              <span class="n">requestProcessor</span><span class="o">.</span><span class="na">invokeAsync</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">getApplicationContext</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">FindItemsByKeywordsCallback</span> <span class="kd">implements</span> <span class="n">HttpCallback</span><span class="o">&lt;</span><span class="n">FindItemsByKeywordsResponse</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="n">FindItemsByKeywordsResponse</span> <span class="n">responseData</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">responseData</span><span class="o">.</span><span class="na">getAck</span><span class="o">()</span> <span class="o">==</span> <span class="n">AckValue</span><span class="o">.</span><span class="na">SUCCESS</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span>
</span><span class='line'>                      <span class="n">responseData</span><span class="o">.</span><span class="na">getSearchResult</span><span class="o">().</span><span class="na">getItem</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getTitle</span><span class="o">(),</span>
</span><span class='line'>                      <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span>
</span><span class='line'>                      <span class="n">responseData</span><span class="o">.</span><span class="na">getErrorMessage</span><span class="o">().</span><span class="na">getError</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getMessage</span><span class="o">(),</span>
</span><span class='line'>                      <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onHttpError</span><span class="o">(</span><span class="n">ResponseStatus</span> <span class="n">responseCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Toast</span><span class="o">.</span><span class="na">makeText</span><span class="o">(</span><span class="n">getApplicationContext</span><span class="o">(),</span>
</span><span class='line'>                    <span class="n">responseCode</span><span class="o">.</span><span class="na">getStatusCode</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">responseCode</span><span class="o">.</span><span class="na">getStatusMessage</span><span class="o">(),</span>
</span><span class='line'>                    <span class="n">Toast</span><span class="o">.</span><span class="na">LENGTH_LONG</span><span class="o">).</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is easy to understand if you know Java and Android, let me give a few comments:<br/>
1. We register a click listener to the button, inside the listener is the main application logic:
get keywords input and build a FindItemByKeywordsRequest object, get a FindItemByKeywordsRequestProcessor from the factory we defined above, and invoke the request processor asynchronously at last.<br/>
2. When we build the FindItemByKeywordsRequestProcessor instance, we passed in a FindItemsByKeywordsCallback instance as parameter, FindItemsByKeywordsCallback implements HttpCallback interface, it contains the main response logic, this is the place when final asynchronous response handling happen. Usually, inside a HttpCallback, we update UI according to the success or failure of the response, in this case, if the response is successful, we show the title of the result item, if there is http error, we show the status code and message. Since eBay Finding service support Response Resident Error(RRE), even in the onSuccess callback, we still need to check the Ack value to find out if there is application error and handle accordingly.</p>

<p>Here I just show a typical asynchronous service invocation paradigm using Nano-rest framework, you can follow this paradigm for other service invocations according to your real needs.</p>

<h3>Step 5 : Run the application</h3>

<p>Now lets run the application, note again, please fill in your APP NAME before you run the application, below is the UI of a success case:</p>

<p><img class="center" src="http://bulldog2011.github.com/images/nano-rest/hello_ebay_finding_success.png" width="400" height="600"></p>

<p>Let&#8217;s provide an invalid APP NAME and try again, below is the UI of the failed case since the APP NAME is invalid:</p>

<p><img class="center" src="http://bulldog2011.github.com/images/nano-rest/hello_ebay_finding_failure.png" width="400" height="600"></p>

<p>To facilitate debug and trouble shooting, you can always check the request or response xml by looking at the log in the LogCat provided by ADT.</p>

<h3>Conclusion:</h3>

<p>The demo shown in this tutorial is just a bare minimum or starter kit, there is still much work to do before you can release a fully functional service backed Android application, but anyway, with a reuseable service proxy, you are free from low level and error-prone serivce message parsing and http handling anymore, instead, you can put your effor on main application logic and UI, this can definitly accelerate the development of the application.</p>

<p>Scheam driven development is a popular and mature development methodology, when used appropriately, it can improve development efficiency and enhance the reliability and maintainability of the application. Now with the support of Nano-rest framework and the mxjc binding compiler, we can also do schema driven client development on Android.</p>

<p>You can find the whole source of the sample application and all the generated eBay Finding service classes <a href="https://github.com/bulldog2011/nano-rest/tree/master/sample/HelloEBayFinding">here</a>.</p>

<h4>Update 1 (2.20.2013)</h4>

<p>A similar proxy and a demo for <a href="https://www.x.com/developers/ebay/products/shopping-api">eBay Shopping API</a> have been created, get the whole source <a href="https://github.com/bulldog2011/nano-rest/tree/master/sample/HelloEBayShopping">here</a>. With the Shopping API proxy as SDK and the demo as template, you may create a functional eBay Shopping API based appliction for Android, you may even mix both eBay Finding and Shopping APIs in your application, cool.</p>

<h4>Update 2 (2.21.2013)</h4>

<p>A similar proxy and a demo for <a href="https://www.x.com/developers/ebay/products/trading-api">eBay Trading API</a> have been created, get the whole source <a href="https://github.com/bulldog2011/nano-rest/tree/master/sample/HelloEBayTrading">here</a>. Now you can build more cool eBay Apps on Android, like buying and selling Apps, enjoy! <br/>
<strong><em>Note </em></strong> eBay Trading wsdl has some issue to work with mxjc directly, if you want to generate eBay Trading proxy from <a href="http://developer.ebay.com/webservices/latest/ebaySvc.wsdl">eBay Trading wsdl</a> using mxjc, you need to do following fix:</p>

<ol>
<li>Remove an any element declaration in ReviseInventoryStatusRequestType, since any has already been declarated in the AbstractRequestType(from which ReviseInventoryStatusRequestType extends).</li>
<li>Add a RequesterCredentials(of type CustomSecurityHeaderType) element in AbstractRequestType, such that eBay token authentication can work with XML call.</li>
<li>Add following annotation in the schema definition(at the beginning):</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>   <span class="nt">&lt;xs:annotation&gt;</span>
</span><span class='line'>   <span class="nt">&lt;xs:appinfo&gt;</span>
</span><span class='line'>     <span class="nt">&lt;jaxb:globalBindings</span> <span class="na">typesafeEnumMaxMembers=</span><span class="s">&quot;1000&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/xs:appinfo&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/xs:annotation&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>since the numbe of members in some enum types in wsdl exceeds the maximum allowed by defult xjc/jaxb processor. Of couse, you also need to declare jaxb namespace and version in wsdl definition.
<a href="https://github.com/bulldog2011/nano-rest/tree/master/sample/HelloEBayTrading/wsdl">Here</a> is a fixed eBay Trading wsdl(version 809), you can search &#8216;mxjc&#8217; to find out what I have fixed.</p>

<p>Also, eBay Trading wsdl is very big(> 5M), leading to big jar after code generation and compilation, however, eBay provides a <a href="http://developer.ebay.com/DevZone/codebase/wsdlpruner/pruner.zip">wsdl pruner tool</a>, to minimize jar of your application on Android, you can use this tool to prune the wsdl according to the operations you need, for example, if you only need <a href="http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/AddItem.html">AddItem</a> operation, just choose this operation, the pruner will ensure only AddItem call related types are left in wsdl after pruning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[movie search android app using nano]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/12/movie-search-android-app-using-nano/"/>
    <updated>2013-02-12T17:02:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/12/movie-search-android-app-using-nano</id>
    <content type="html"><![CDATA[<p><a href="http://www.javacodegeeks.com/author/Ilias-Tsagklis">Some one</a> did a great job to write a tutorial about <a href="http://www.javacodegeeks.com/2010/10/android-full-application-tutorial.html">the development of an end to end Android application</a>,  this is a full android application, including main activity UI, HTTP interaction, async request handling and response parsing, list view, etc. In that tutorial, the author manually parsed the response to domain objects using SAX parser built in Android, while in this post, I will show you how I adapted that application by leveraging automatic annotation driven binding supported by Nano xml binding framework.</p>

<!--more-->


<p><a href="https://github.com/bulldog2011/nano">Nano</a> is a light-weight xml binding framework tailored for Android platform, with Nano, you can be free from error-prone and tedious xml parsing work, instead, you can focus your main development effort on application logic and UI.</p>

<p>The original author has elaborated the development steps of the application in his tutorial series, so in this post, I will not repeat what he has done very well, please refer to his tutorial for details about the overall application development. In this post, I will focus on the adaption of the response binding with domain objects part, using Nano binding framework.</p>

<p>The application is a typical movie search application, using <a href="http://api.themoviedb.org/2.1/">TMDb API</a> in the backend, if you are not familar with this API, please have a quick review of its official site, also, If you want to try the sample appliction on emulator or real Android device, you need to <a href="https://www.themoviedb.org/account/signup">sign up</a> for a TMDb account, get the API key, and replace the API key placeholder with your real key before you run the application, the source file need to be changed is <a href="https://github.com/bulldog2011/nano/blob/master/sample/AndroidMovieSearchAppProject/src/com/javacodegeeks/android/apps/moviesearchapp/services/GenericSeeker.java">this one</a>.</p>

<p>Let&#8217;s cut to the chase and see how to perform the binding. The main API we will use is <a href="http://api.themoviedb.org/2.1/methods/Movie.search">movie search</a>, you can find an example response on the API usage page.</p>

<p>First of all, download latest Nano release by following link on <a href="https://github.com/bulldog2011/nano">this page</a>, and put the Nano jar in the <strong><em>libs</em></strong> folder of the sample application(You can download the original application <a href="http://dl.dropbox.com/u/7215751/JavaCodeGeeks/AndroidFullAppTutorialPart07/AndroidMovieSearchAppProject_Part07.zip">here</a>, or you may download the whole adapted application by following link at the end of this post).</p>

<p>The most important thing is to create the model objects and map appropriately to the XML document by inspecting the sample response on TMDb API site. If we take a look at the XML file, we should see that the root element is called OpenSearchDescription and it includes a Query element, a &#8220;totalResults&#8221; element and a number of movies. Here is our main model class looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javacodegeeks</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">moviesearchapp</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.RootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RootElement</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;OpenSearchDescription&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovieSearchResult</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5992078345571261309L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;Query&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Query</span> <span class="n">query</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">totalResults</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;movies&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">MovieContainer</span> <span class="n">movieContainer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://bulldog2011.github.com/nano/apidocs/com/leansoft/nano/annotation/RootElement.html">RootElement</a> annotation denotes that the specific class represents a root XML element, we also provided a <a href="http://bulldog2011.github.com/nano/apidocs/com/leansoft/nano/annotation/RootElement.html#name%28%29">name</a> parameter equals to &#8216;OpenSearchDescription&#8217; in the annotation since this is the real root element name in the sample response, if this name is not provided, Nano will by default use the class name(with first chararacter in lower case) as the element name, this is not expected. We also use the <a href="http://bulldog2011.github.com/nano/apidocs/com/leansoft/nano/annotation/Element.html">Element</a> annotations for the nested elements. Note that Nano can only handle annotations annotated directly on fields, not on get/set methods, it&#8217;s ok to annotate either public or private fields. One thing to be aware of is that we use the <a href="http://bulldog2011.github.com/nano/apidocs/com/leansoft/nano/annotation/Element.html#name%28%29">name</a> parameter(for &#8220;Query&#8221; and &#8220;movies&#8221;) in order to explicitly specify the corresponding XML element name. This should be done when the XML element has a different name than the Java field, since Nano by default looks for an element with the same name as the field.</p>

<p>Let&#8217;s now see the Query class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javacodegeeks</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">moviesearchapp</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Query</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">7875169023013805580L</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">searchTerms</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class contains only an attribute called &#8220;sarchTerms&#8221;, so the relevant field is annotated with <a href="http://bulldog2011.github.com/nano/apidocs/com/leansoft/nano/annotation/Attribute.html">Attribute</a>.</p>

<p>Very easy until now. Let&#8217;s check the more complex Movie class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javacodegeeks</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">moviesearchapp</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Movie</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">5114870955079482108L</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">score</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">popularity</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">translated</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">adult</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">language</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;original_name&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">originalName</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;imdb_id&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">imdbId</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">votes</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">rating</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">certification</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">overview</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">released</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">version</span><span class="o">;</span>
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;last_modified_at&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">lastModifiedAt</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;images&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">ImageContainer</span> <span class="n">imageContainer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class contains many fields, all of them map to XML element, we don&#8217;t want get trouble with writing Element annotations on every fields, so we just add a <a href="http://bulldog2011.github.com/nano/apidocs/com/leansoft/nano/annotation/Default.html">Default</a> annotation at the class level, indicating that fields of this class should be mapped to default XML element unless explicitly specified. We also need to explicitly provide annotation parameter name on some fields(like original_name, imdb_id, last_modified_at and images) since there is a mismatch between Java field name and corresponding XML element name.</p>

<p>Let&#8217;s see the Image class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javacodegeeks</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">moviesearchapp</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Image</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5274909668022888191L</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SIZE_ORIGINAL</span> <span class="o">=</span> <span class="s">&quot;original&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SIZE_MID</span> <span class="o">=</span> <span class="s">&quot;mid&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SIZE_COVER</span> <span class="o">=</span> <span class="s">&quot;cover&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SIZE_THUMB</span> <span class="o">=</span> <span class="s">&quot;thumb&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TYPE_PROFILE</span> <span class="o">=</span> <span class="s">&quot;profile&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TYPE_POSTER</span> <span class="o">=</span> <span class="s">&quot;poster&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">url</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">size</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">width</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class includes only attributes so we annotate the fields accordingly, there is no annotation on public static final fields, so these fields are not visable to Nano binding framework at runtime.</p>

<p>Till now, the carefull reader will find that the root MovieSearchResult class has no direct reference to the Movie class(The Movie class also has no direct reference to the Image class), the MovieSearchResult class only reference a container class called MovieContainer, why we need a container class instead of a direct Movie class reference? This is caused by a limitation of current Nano framework, it does not support <strong><em>inline style list</em></strong> yet. By inspecting the sample XML response, you will find a list of movie elements are wrapped in a movies element, but there is no specific annotation for wrapper element, so as a workaround, we build a container class for the wrapper element, below is the definition of the MovieContainer(ImageContainer is similar):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javacodegeeks</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">moviesearchapp</span><span class="o">.</span><span class="na">model</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovieContainer</span> <span class="kd">implements</span> <span class="n">Serializable</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">957664961371798735L</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;movie&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Movie</span><span class="o">&gt;</span> <span class="n">movies</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With all domain class mapping defined, the final step is to write the response binding code, this is quite simple since the original author designed the application in a quite clean way, just find the GenericSeeker abstract class in the services package, in the class we define and initialize a Nano xml reader, see below(most irrelevant content of this class is omitted here to save space):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javacodegeeks</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">moviesearchapp</span><span class="o">.</span><span class="na">services</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.net.URLEncoder</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.NanoFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">GenericSeeker</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">IReader</span> <span class="n">xmlReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLReader</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Then in the concrete MovieSeeker class we bind the HTTP response with MovieSearchResult class instance in Nano way, the binding can&#8217;t be simpler, it&#8217;s only one java statement, below is an extract of the MovieSeeker class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javacodegeeks</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">moviesearchapp</span><span class="o">.</span><span class="na">services</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.util.Log</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.javacodegeeks.android.apps.moviesearchapp.model.Movie</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.javacodegeeks.android.apps.moviesearchapp.model.MovieSearchResult</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MovieSeeker</span> <span class="kd">extends</span> <span class="n">GenericSeeker</span><span class="o">&lt;</span><span class="n">Movie</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Movie</span><span class="o">&gt;</span> <span class="nf">retrieveMoviesList</span><span class="o">(</span><span class="n">String</span> <span class="n">query</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">constructSearchUrl</span><span class="o">(</span><span class="n">query</span><span class="o">);</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">httpRetriever</span><span class="o">.</span><span class="na">retrieve</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">getClass</span><span class="o">().</span><span class="na">getSimpleName</span><span class="o">(),</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>      <span class="n">MovieSearchResult</span> <span class="n">searchResult</span> <span class="o">=</span> <span class="n">xmlReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">MovieSearchResult</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">searchResult</span><span class="o">.</span><span class="na">movieContainer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">searchResult</span><span class="o">.</span><span class="na">movieContainer</span><span class="o">.</span><span class="na">movies</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all I have done to adapt the orignal application to use Nano binding instead, now let&#8217;s run the sample in emulator(don&#8217;t forget to fill in your API key before run), below is a screenshot:</p>

<p><img class="center" src="http://bulldog2011.github.com/images/nano/movie_search.png" width="400" height="600"></p>

<p>Cool! with automatic annotation driven binding supported by Nano, there is no error-prone and tedious manual xml parsing anymore, the whole application becomes even more cleaner and maintainable. So, when you develop your next xml service based Android application, remember that manual xml parsing is not necessary on Android platform, it can be completely automated by Nano binding framework!</p>

<p>You may get the whole source of the adapted application <a href="https://github.com/bulldog2011/nano/tree/master/sample/AndroidMovieSearchAppProject">here</a>.</p>

<p>At last, I would thank the original author again for a great tutorial he has written!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano on android tutorial 1]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/10/nano-on-android-tutorial-1/"/>
    <updated>2013-02-10T16:09:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/10/nano-on-android-tutorial-1</id>
    <content type="html"><![CDATA[<p>This is my first post showing how to use Nano on Android, in this post, I will show you how to use Nano to export and import a set of domain object as XML to/from the SD card on Android. Nano is tailored for Android platform, you will see in this post how Nano can greatly simplify tedious and boring object and xml binding task in Android application development.</p>

<!--more-->


<h3>Prerequisite</h3>

<p>Nano is quite light, On Android platform, it has no 3rd party jar dependency, all you need to do is to create a noraml Android project and add reference to the Nano jar, you can find latest Nano jar by following link <a href="https://github.com/bulldog2011/nano">here</a>, by the way, if necessary, you may also reference Nano source directly in your project.</p>

<h3>Define Domain Classes</h3>

<p>As usual project, let&#8217;s define domain classes first. The set of domain classes is small but illustrates how to serialize both aggregations and lists of other domain classes. At the root is an Organization class, that has a name, Address object and a list of Person objects. Each Person object has a name and an Address object. Below are the definitions of these domain classses, note, get/set methods are omitted to save space.</p>

<h4>Organization</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Organization</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">staff</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Address</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">code</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Person</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">.</span><span class="na">domain</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, all domain classes are annotated with @Default Nano annotation, indicating that all fields of the class will be mapped to xml element during serialization, except that on the count filed of Organization, there is an explicit @Attribute annotation, indicating that the count field will be mapped to xml attribute during serialization.</p>

<p>Also, I&#8217;ve build a Generator class to auto-generate faked organization with faked person list, to save space, I don&#8217;t  want to dump the Generator code here, you can find the source <a href="https://github.com/bulldog2011/nano/blob/master/sample/nano-and-android/src/com/leansoft/nano/sample/domain/Generator.java">here</a>.</p>

<h3>The Sample Flow</h3>

<p>The sample has a quite simple flow :  <br/>
1. On applicaton startup, auto-generate a faked organization with a random number of persons.<br/>
2. On click the &#8216;Export Data&#8217; button, serialize the organization to xml on SD card using Nano Xml writer, then update status text with bytes written.<br/>
3. On click the &#8216;Import Data&#8217; button, deserialize the xml on SD card into organization object using Nano Xml reader, then update status text with person size got.</p>

<p><img class="center" src="http://bulldog2011.github.com/images/nano/nano_and_android.png" width="400" height="600"></p>

<p>The main UI of the sample cantains three components:<br/>
1. A &#8216;Export Data&#8217; button for serialization demo. <br/>
2. A &#8216;Import Data&#8217; button for deserialization demo.<br/>
3. A TextView for status display.</p>

<p><strong><em>Note</em></strong>, faked data generation, export, import may be time consuming tasks depending the size of the data, executing these time consuming tasks directly on main UI thread may block it, leading to application crash, so it&#8217;s a best practice to encapsulate these tasks as asyn tasks, and to use progress bar to let user know the progress of the task. I have encapsulated these tasks using Android AsyncTask structure, for details, please refer to the source of this demo project(link at the end of this post), for more background about Android AsyncTask, please refer to <a href="http://developer.android.com/reference/android/os/AsyncTask.html">its documentation</a>.</p>

<p>The buttons <strong><em>Export</em></strong> and <strong><em>Import</em></strong> have their click actions tied to the flowing methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Button</span> <span class="n">exportButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">exportButton</span><span class="o">);</span>
</span><span class='line'><span class="n">exportButton</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span> <span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">ExportTask</span>  <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ExportTask</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="k">new</span> <span class="n">OnCompletionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompletion</span><span class="o">(</span><span class="n">Object</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="o">(</span><span class="n">File</span><span class="o">)</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>              <span class="n">appendStatus</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Written %d bytes to %s&quot;</span><span class="o">,</span> <span class="n">file</span><span class="o">.</span><span class="na">length</span><span class="o">(),</span> <span class="n">file</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">()));</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      <span class="n">task</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">organization</span><span class="o">,</span> <span class="n">dirName</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Button</span> <span class="n">importButton</span> <span class="o">=</span> <span class="o">(</span><span class="n">Button</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">importButton</span><span class="o">);</span>
</span><span class='line'><span class="n">importButton</span><span class="o">.</span><span class="na">setOnClickListener</span><span class="o">(</span><span class="k">new</span> <span class="n">OnClickListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onClick</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ImportTask</span>  <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImportTask</span><span class="o">(</span><span class="n">MainActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="k">new</span> <span class="n">OnCompletionListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCompletion</span><span class="o">(</span><span class="n">Object</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">organization</span> <span class="o">=</span> <span class="o">(</span><span class="n">Organization</span><span class="o">)</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>              <span class="n">appendStatus</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Imported organization &#39;%s&#39; having %d persons&quot;</span><span class="o">,</span>
</span><span class='line'>                      <span class="n">organization</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">organization</span><span class="o">.</span><span class="na">getStaff</span><span class="o">().</span><span class="na">size</span><span class="o">()));</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">});</span>
</span><span class='line'>      <span class="n">task</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">dirName</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong><em>ExportTask</em></strong> and <strong><em>ImportTask</em></strong> classes have logic where real Nano marshalling and unmarshalling magic happens:</p>

<h4>Export Logic</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="n">File</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Organization</span> <span class="n">organization</span> <span class="o">=</span> <span class="o">(</span><span class="n">Organization</span><span class="o">)</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">dirName</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">getFile</span><span class="o">(</span><span class="n">dirName</span><span class="o">,</span>  <span class="n">fileName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Writer</span> <span class="n">out</span> <span class="o">=</span> <span class="n">openForWrite</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">organization</span><span class="o">,</span> <span class="n">out</span><span class="o">);</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">file</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG</span><span class="o">,</span> <span class="s">&quot;Failed to export. &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Import Logic</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">Organization</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">dirName</span>  <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="n">Reader</span> <span class="n">in</span> <span class="o">=</span> <span class="n">openForRead</span><span class="o">(</span><span class="n">getFile</span><span class="o">(</span><span class="n">dirName</span><span class="o">,</span>  <span class="n">fileName</span><span class="o">));</span>
</span><span class='line'>        <span class="n">IReader</span> <span class="n">xmlReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLReader</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Organization</span> <span class="n">org</span> <span class="o">=</span> <span class="n">xmlReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">Organization</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">in</span><span class="o">);</span>
</span><span class='line'>        <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">org</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">LOG</span><span class="o">,</span> <span class="s">&quot;Failed to import. &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you see the power of Nano : there are only 2 lines of marshalling and unmarshalling code, amazing!</p>

<h3>The Resulting XML</h3>

<p>It&#8217;s easy to pull out the XML file from the SD card using the File Explorer of DDMS.</p>

<p>And here is an extract of its contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;organization</span> <span class="na">count=</span><span class="s">&quot;88&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;street&gt;</span>Street LY07<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>    <span class="nt">&lt;code&gt;</span>VXUSB<span class="nt">&lt;/code&gt;</span>
</span><span class='line'>    <span class="nt">&lt;city&gt;</span>City SWT<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>  <span class="nt">&lt;staff&gt;</span>
</span><span class='line'>    <span class="nt">&lt;address&gt;</span>
</span><span class='line'>      <span class="nt">&lt;street&gt;</span>Street VRAW<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>      <span class="nt">&lt;code&gt;</span>6NEA8<span class="nt">&lt;/code&gt;</span>
</span><span class='line'>      <span class="nt">&lt;city&gt;</span>City JLN<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>name ND4Q<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/staff&gt;</span>
</span><span class='line'>  <span class="nt">&lt;staff&gt;</span>
</span><span class='line'>    <span class="nt">&lt;address&gt;</span>
</span><span class='line'>      <span class="nt">&lt;street&gt;</span>Street XW8P<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>      <span class="nt">&lt;code&gt;</span>DNSP7<span class="nt">&lt;/code&gt;</span>
</span><span class='line'>      <span class="nt">&lt;city&gt;</span>City PXP<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>name 5OMA<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/staff&gt;</span>
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Org IN3V9<span class="nt">&lt;/name&gt;</span>
</span><span class='line'><span class="nt">&lt;/organization&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Source</h3>

<p>You can get the whole source of this demo project <a href="https://github.com/bulldog2011/nano/tree/master/sample/nano-and-android">here</a>, by the way, some source is adapted from <a href="http://blog.ribomation.com/2011/07/android-and-xml/">this post</a>, so part of the content of this post should be contributed to the author of that post.</p>

<h3>Conclusion</h3>

<p>Without automatic xml binding tool, data serialization and deserialization on Android is a tedious and time-consuming development task, needless to say later maintenance. The Nano xml binding framework can greatly accelerate xml based Android application development by automating the tedious and error-prone xml binding tasks, letting developers put more focus on their application logic instead of xml parsing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano benchmark on android]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/08/nano-benchmark-on-android/"/>
    <updated>2013-02-08T10:04:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/08/nano-benchmark-on-android</id>
    <content type="html"><![CDATA[<p>Since I have built a light-weight XML/JSON binding framework tailored for Android platform, I want to test its performance on Android when compared with typical xml parsers on Android like SAX, DOM and Xml Pull, I will show you detailed test results in this post.</p>

<!--more-->


<p>I did the benchmark on my own mobile phone(it was quite cheap when I bought it:)), below is the spec of my mobile phone:</p>

<blockquote><ol>
<li>Brand : Samsung SCH-i559(Galaxy Mini)</li>
<li>CPU : ARM6 600MHz</li>
<li>RAM : 128MB</li>
<li>OS : Android 2.2.1</li>
</ol>
</blockquote>

<p>The payload I used is a faked person list, you can find the scheam <a href="https://github.com/bulldog2011/nano/blob/master/performance/nano-vs-jaxb/src/main/resources/person.xsd">here</a> and all payloads <a href="https://github.com/bulldog2011/nano/tree/master/performance/nano-on-android/assets">here</a>, I created these payloads with Nano and an auto-fake data generator called <a href="http://www.jemos.eu/projects/podam/">podam</a>. I tested 3 kinds of payload size :</p>

<blockquote><ol>
<li>10 records - 4KB xml, 2KB json</li>
<li>50 records - 17KB xml, 9KB json</li>
<li>300 records - 100KB xml, 50KB json</li>
</ol>
</blockquote>

<p>Basically, the size of json payload is almost half of the size of xml, this is because json has a more compact messsage format, the 300 records case is used for testing performance when dealing with big payload size.</p>

<p>The benchmark program itself is a typcial Android application, I adaped the test project from <a href="http://www.developer.com/ws/android/development-tools/Android-XML-Parser-Performance-3824221.htm">this</a> post, I added Nano cases and SAX, DOM, XML pull parsing cases in the benchmark program, you can download the whole benchmark program <a href="https://github.com/bulldog2011/nano/tree/master/performance/nano-on-android">here</a>.</p>

<p>Below is the UI of the benchmark application on PC emulator,</p>

<p><img src="http://bulldog2011.github.com/images/nano/nano-benchmark-app1.png" width="300" height="600">  <img src="http://bulldog2011.github.com/images/nano/nano-benchmark-app2.png" width="300" height="600"></p>

<p>following choices are avaliable for combined benchmark:</p>

<blockquote><ol>
<li>Thread Number - 1, 3, 5 threads</li>
<li>Payload Size - 10, 50, 300 records</li>
<li>Test Type - Nano Xml Read, Nano Json Read, SAX Read, DOM Read, XML Pull Read, Nano Xml Write, Nano Json Write</li>
</ol>
</blockquote>

<h3>Test Result</h3>

<p><strong><em>Note:</em></strong></p>

<blockquote><ol>
<li>the unit of test result is milliseconds</li>
<li>all test results are average of 20 runs.</li>
<li>for read test, the time includes file reading time, for write test, serialized content is only written in memory, not real file.</li>
</ol>
</blockquote>

<h4>1 Thread Read(Unmarshall) Test</h4>

<table>
   <tr>
      <td>[Records]</td>
      <td>[Nano XML]</td>
      <td>[Nano JSON]</td>
      <td>[RAW SAX]</td>
      <td>[RAW DOM]</td>
      <td>[RAW Pull]</td>
   </tr>
   <tr>
      <td>10</td>
      <td>34</td>
      <td>31</td>
      <td>18</td>
      <td>53</td>
      <td>24</td>
   </tr>
   <tr>
      <td>50</td>
      <td>133</td>
      <td>67</td>
      <td>70</td>
      <td>217</td>
      <td>90</td>
   </tr>
   <tr>
      <td>300</td>
      <td>724</td>
      <td>292</td>
      <td>388</td>
      <td>1318</td>
      <td>497</td>
   </tr>
</table>


<p></p>

<h4>3 Threads Read(Unmarshall) Test</h4>

<table>
   <tr>
      <td>[Records]</td>
      <td>[Nano XML]</td>
      <td>[Nano JSON]</td>
      <td>[RAW SAX]</td>
      <td>[RAW DOM]</td>
      <td>[RAW Pull]</td>
   </tr>
   <tr>
      <td>10</td>
      <td>102</td>
      <td>99</td>
      <td>53</td>
      <td>163</td>
      <td>76</td>
   </tr>
   <tr>
      <td>50</td>
      <td>405</td>
      <td>215</td>
      <td>206</td>
      <td>713</td>
      <td>272</td>
   </tr>
   <tr>
      <td>300</td>
      <td>2318</td>
      <td>951</td>
      <td>1186</td>
      <td>3812</td>
      <td>1599</td>
   </tr>
</table>


<p></p>

<h4>1 Thread Write(Marshall) Test</h4>

<table>
   <tr>
      <td>[Records] </td>
      <td>[Nano XML]</td>
      <td>[Nano JSON]</td>
   </tr>
   <tr>
      <td>10</td>
      <td>15</td>
      <td>23</td>
   </tr>
   <tr>
      <td>50</td>
      <td>61</td>
      <td>87</td>
   </tr>
   <tr>
      <td>300</td>
      <td>403</td>
      <td>508</td>
   </tr>
</table>


<p></p>

<h4>3 Threads Write(Marshall) Test</h4>

<table>
   <tr>
      <td>[Records] </td>
      <td>[Nano XML]</td>
      <td>[Nano JSON]</td>
   </tr>
   <tr>
      <td>10</td>
      <td>39</td>
      <td>60</td>
   </tr>
   <tr>
      <td>50</td>
      <td>118</td>
      <td>276</td>
   </tr>
   <tr>
      <td>300</td>
      <td>1290</td>
      <td>1664</td>
   </tr>
</table>


<p></p>

<h3>Conclusion</h3>

<h4>For Read Test:</h4>

<ol>
<li>Of all the tests, the best performers are Nano JSON and RAW SAX, this is not to say that the parsing speed of JSON is identical to SAX, but JSON message format is more compact, and its payload size is almost half of XML, leading to better performance.</li>
<li>Of all the tests, the worst performer is RAW DOM, this is obvious since DOM needs to put whole doc tree in memory and this will triger much GC on memory limited mobile device, leading to much slower speed.</li>
<li>The performance of Nano XML is in the middle, internally, Nano XML also use SAX paring technology, but it also needs to do automatic binding by reflection, this causes Nano XML to lose almost half of its performance, however, one the other hand, the maintainability and development effciency of Nano XML are much better than SAX.</li>
</ol>


<h4>For Write Test:</h4>

<p>Both Nano XML and Nano JSON perform quite good, in singe thread case they both can serialize 300 records(100KB xml, 50KB json) with less than half second.</p>

<p>Another finding is, there is almost a linear relationship between thread number and performance, when more threads are addded to benchmark, performance will degrade in proportion, considering the computation resource limitation of mobile device, it&#8217;s not advisable to do multi-threading xml parsing on mobile device.</p>

<h3>My Recommendation:</h3>

<p>If your mobile application is performance critical, Nano JSON or RAW SAX is the way to go, I perfer Nano JSON since its automatic binding feature will have better maintainability and can impove development effciency a lot.<br/>
In other cases, Nano XML is also a good choice since it&#8217;s a good balance among maintainability, development effciency, readability and performance. This is especially the case when you have a complex business domain, in such case, parsing a large amount of domain class will be a big development headache, never to say later maintenance, instead, the automatic code generation and binding features of Nano binding framework will be a big help in such case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[schema driven nano binding]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/07/schema-driven-nano-binding/"/>
    <updated>2013-02-07T20:32:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/07/schema-driven-nano-binding</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bulldog2011/nano">Nano</a> is a light weight xml/json binding framework targeting Android platform, in this post, I will show you how to use Nano and the accompanying compiler tool <a href="https://github.com/bulldog2011/mxjc">mxjc</a> together to do schema driven xml or json data binding - similar to the development process using JAXB and XJC.</p>

<!--more-->


<h3>The Big Picture</h3>

<p><img class="center" src="http://bulldog2011.github.com/images/nano/nano-binding.png" width="400" height="400"></p>

<p>A picture is worth a thousand words, a typical schema driven xml data binding development includes two main phases:</p>

<blockquote><ol>
<li><strong><em>Build Time</em></strong> - in this phase, we authorize xml scheam or xsd first, the schema specifies the metadata of our business domain, this is the single source of truth, later code generation all depends on the scheam, only if the scheam changes, then we need to regenerate source code. With schema specified, we use the mxjc schema binding compiler to compile the scheam into Nano bindable classes, mxjc is based on JAXB xjc, so its usage is similar to xjc. Classes generated by mxjc will be annotated with Nano annotations, these annotations specify the mapping between pojo and xml, they will later be scanned by Nano binding framework to guide the real marshalling or unmarshalling at runtime.</li>
<li><strong><em>Runtime time</em></strong> - in this phase, we have Nano bindable domain class in hand, what&#8217;s left is to do marshalling or unmarshalling according to real needs, by leveraging Nano binding framework. Nano is a middle man between XML/JSON document and java object, when objects or pojos are fed into the Nano binding framework, it can marshall them or serialize them into either XML or JSON content, and when XML or JSON content is fed into the Nano binding framework, it can unmarshall or deserialize them into objects or pojos.</li>
</ol>
</blockquote>

<p>By the way, scheam driven development is good for some scenario with complex business domain, without formal schema and automated code generation, the manual written code base will be very hard to maintain. However, when your use case is simple, it&#8217;s not necessary to begin with scheam, just write your domian class then annotate with Nano annations is also workable.</p>

<h3>A Zoo Sample</h3>

<p>I&#8217;ve create an ant project to demo the scheam driven developmeng with Nano and mxjc, you can find the project <a href="https://github.com/bulldog2011/nano/tree/master/sample/schema-driven">here</a>, you can download the whole project and run it with Ant(suppose you have Ant installed).</p>

<p>Belew is the Ant build file which includes all scheam driven development stets mentioned above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">basedir=</span><span class="s">&quot;.&quot;</span> <span class="na">default=</span><span class="s">&quot;run&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;sample.home&quot;</span> <span class="na">value=</span><span class="s">&quot;.&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;path</span> <span class="na">id=</span><span class="s">&quot;classpath&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;pathelement</span> <span class="na">path=</span><span class="s">&quot;classes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${sample.home}&quot;</span> <span class="na">includes=</span><span class="s">&quot;lib/mxjc/*.jar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">&quot;${sample.home}&quot;</span> <span class="na">includes=</span><span class="s">&quot;lib/nano/*.jar&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/path&gt;</span>
</span><span class='line'>  <span class="nt">&lt;taskdef</span> <span class="na">name=</span><span class="s">&quot;mxjc&quot;</span> <span class="na">classname=</span><span class="s">&quot;com.leansoft.mxjc.MXJCTask&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;classpath</span> <span class="na">refid=</span><span class="s">&quot;classpath&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/taskdef&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!--compile Java source files--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;compile&quot;</span> <span class="na">description=</span><span class="s">&quot;Compile all Java source files&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo</span> <span class="na">message=</span><span class="s">&quot;Compiling the schema...&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;gen-src&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mxjc</span> <span class="na">schema=</span><span class="s">&quot;schema/zoo.xsd&quot;</span> <span class="na">package=</span><span class="s">&quot;com.leansoft.nano.zoo&quot;</span> <span class="na">destdir=</span><span class="s">&quot;gen-src&quot;</span> <span class="na">removeOldOutput=</span><span class="s">&quot;yes&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;produces</span> <span class="na">dir=</span><span class="s">&quot;gen-src/com/leansoft/nano/zoo&quot;</span> <span class="na">includes=</span><span class="s">&quot;**/*.java&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/mxjc&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo</span> <span class="na">message=</span><span class="s">&quot;Compiling the java source files...&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">&quot;classes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;javac</span> <span class="na">destdir=</span><span class="s">&quot;classes&quot;</span> <span class="na">debug=</span><span class="s">&quot;on&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;src</span> <span class="na">path=</span><span class="s">&quot;src&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;src</span> <span class="na">path=</span><span class="s">&quot;gen-src&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;classpath</span> <span class="na">refid=</span><span class="s">&quot;classpath&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/javac&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;run&quot;</span> <span class="na">depends=</span><span class="s">&quot;compile&quot;</span> <span class="na">description=</span><span class="s">&quot;Run the sample app&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;echo</span> <span class="na">message=</span><span class="s">&quot;Running the sample application...&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;java</span> <span class="na">classname=</span><span class="s">&quot;com.leansoft.nano.sample.ZooExample&quot;</span> <span class="na">fork=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;classpath</span> <span class="na">refid=</span><span class="s">&quot;classpath&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/java&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">&quot;clean&quot;</span> <span class="na">description=</span><span class="s">&quot;Deletes all the generated artifacts.&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;delete</span> <span class="na">dir=</span><span class="s">&quot;gen-src&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;delete</span> <span class="na">dir=</span><span class="s">&quot;classes&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/target&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>mxjc provides an Ant task called MXJCTask, similar to xjc ant task, mxjc ant task can also auto-generate source from scheam driven by Ant.</p>

<p>Following the xml scheam(xsd):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;xsd:schema</span> <span class="na">xmlns:xsd=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;zoo&quot;</span> <span class="na">type=</span><span class="s">&quot;zooInfo&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;comment&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;xsd:complexType</span> <span class="na">name=</span><span class="s">&quot;zooInfo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsd:sequence&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;zooName&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;zooId&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:int&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;animals&quot;</span> <span class="na">type=</span><span class="s">&quot;Animals&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xsd:sequence&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/xsd:complexType&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;xsd:complexType</span> <span class="na">name=</span><span class="s">&quot;Animals&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;xsd:sequence&gt;</span>
</span><span class='line'>      <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;animal&quot;</span> <span class="na">minOccurs=</span><span class="s">&quot;1&quot;</span> <span class="na">maxOccurs=</span><span class="s">&quot;unbounded&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;xsd:complexType&gt;</span>
</span><span class='line'>          <span class="nt">&lt;xsd:sequence&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;animalName&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;xsd:element</span> <span class="na">name=</span><span class="s">&quot;animalType&quot;</span> <span class="na">type=</span><span class="s">&quot;xsd:string&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/xsd:sequence&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/xsd:complexType&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/xsd:element&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/xsd:sequence&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/xsd:complexType&gt;</span>
</span><span class='line'><span class="nt">&lt;/xsd:schema&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The XML document which we are going to read and print in console:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;zoo&gt;</span>
</span><span class='line'>  <span class="nt">&lt;zooName&gt;</span>Vandalur Zoo<span class="nt">&lt;/zooName&gt;</span>
</span><span class='line'>  <span class="nt">&lt;zooId&gt;</span>12321<span class="nt">&lt;/zooId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;animals&gt;</span>
</span><span class='line'>    <span class="nt">&lt;animal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animalName&gt;</span>Lion<span class="nt">&lt;/animalName&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animalType&gt;</span>Wild<span class="nt">&lt;/animalType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/animal&gt;</span>
</span><span class='line'>    <span class="nt">&lt;animal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animalName&gt;</span>Dog<span class="nt">&lt;/animalName&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animalType&gt;</span>Domestic<span class="nt">&lt;/animalType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/animal&gt;</span>
</span><span class='line'>    <span class="nt">&lt;animal&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animalName&gt;</span>White Tiger<span class="nt">&lt;/animalName&gt;</span>
</span><span class='line'>      <span class="nt">&lt;animalType&gt;</span>Wild<span class="nt">&lt;/animalType&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/animal&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/animals&gt;</span>
</span><span class='line'><span class="nt">&lt;/zoo&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Following is the main java code to read the xml file, output some content, and then write the whole objects into json output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.NanoFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.zoo.Animals</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.zoo.ZooInfo</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.zoo.animals.Animal</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ZooExample</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">IReader</span> <span class="n">xmlReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLReader</span><span class="o">();</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">ZooInfo</span> <span class="n">zooInfo</span> <span class="o">=</span> <span class="n">xmlReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">ZooInfo</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;xml/zoo.xml&quot;</span><span class="o">));</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Output after xml read - &quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Zoo Name: &quot;</span> <span class="o">+</span> <span class="n">zooInfo</span><span class="o">.</span><span class="na">getZooName</span><span class="o">());</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Zoo Id: &quot;</span> <span class="o">+</span> <span class="n">zooInfo</span><span class="o">.</span><span class="na">getZooId</span><span class="o">());</span>
</span><span class='line'>      
</span><span class='line'>          <span class="n">Animals</span> <span class="n">animals</span> <span class="o">=</span> <span class="n">zooInfo</span><span class="o">.</span><span class="na">getAnimals</span><span class="o">();</span>
</span><span class='line'>          <span class="n">List</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="n">animalsList</span> <span class="o">=</span> <span class="n">animals</span><span class="o">.</span><span class="na">getAnimal</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">Animal</span> <span class="n">animal</span> <span class="o">:</span> <span class="n">animalsList</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;\t&quot;</span> <span class="o">+</span> <span class="n">animal</span><span class="o">.</span><span class="na">getAnimalName</span><span class="o">());</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;\t\t&quot;</span> <span class="o">+</span> <span class="n">animal</span><span class="o">.</span><span class="na">getAnimalType</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getJSONWriter</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Output after json write - &quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">zooInfo</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>          
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Output</span> <span class="n">after</span> <span class="n">xml</span> <span class="n">read</span> <span class="o">-</span>
</span><span class='line'><span class="n">Zoo</span> <span class="nl">Name:</span> <span class="n">Vandalur</span> <span class="n">Zoo</span>
</span><span class='line'><span class="n">Zoo</span> <span class="nl">Id:</span> <span class="mi">12321</span>
</span><span class='line'>  <span class="n">Lion</span>
</span><span class='line'>      <span class="n">Wild</span>
</span><span class='line'>  <span class="n">Dog</span>
</span><span class='line'>      <span class="n">Domestic</span>
</span><span class='line'>  <span class="n">White</span> <span class="n">Tiger</span>
</span><span class='line'>      <span class="n">Wild</span>
</span><span class='line'><span class="n">Output</span> <span class="n">after</span> <span class="n">json</span> <span class="n">write</span> <span class="o">-</span>
</span><span class='line'><span class="o">{</span><span class="s">&quot;zoo&quot;</span><span class="o">:</span> <span class="o">{</span>
</span><span class='line'>    <span class="s">&quot;animals&quot;</span><span class="o">:</span> <span class="o">{</span><span class="s">&quot;animal&quot;</span><span class="o">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;animalName&quot;</span><span class="o">:</span> <span class="s">&quot;Lion&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;animalType&quot;</span><span class="o">:</span> <span class="s">&quot;Wild&quot;</span>
</span><span class='line'>        <span class="o">},</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;animalName&quot;</span><span class="o">:</span> <span class="s">&quot;Dog&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;animalType&quot;</span><span class="o">:</span> <span class="s">&quot;Domestic&quot;</span>
</span><span class='line'>        <span class="o">},</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="s">&quot;animalName&quot;</span><span class="o">:</span> <span class="s">&quot;White Tiger&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="s">&quot;animalType&quot;</span><span class="o">:</span> <span class="s">&quot;Wild&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">]},</span>
</span><span class='line'>    <span class="s">&quot;zooId&quot;</span><span class="o">:</span> <span class="mi">12321</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;zooName&quot;</span><span class="o">:</span> <span class="s">&quot;Vandalur Zoo&quot;</span>
</span><span class='line'><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>When used properly, scheam driven development can greatly improve agaility in development, and just as I have showed in the post, Nano with mxjc supports scheam driven development smoothly, you may tell me that you would rather choose JAXB to do scheam driven development, I admit that JAXB is more mature and feature-rich than Nano, but one cool thing of Nano is it supports Android platform while JAXB does not, Nano is just tailored for Android platform, in later posts, I will show you how to practice scham driven data binding on Android platform, it&#8217;s facinating, stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano compare to jaxb]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/06/nano-compare-to-jaxb/"/>
    <updated>2013-02-06T20:44:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/06/nano-compare-to-jaxb</id>
    <content type="html"><![CDATA[<p>I just read an interesting post <a href="http://blog.bdoughan.com/2010/10/how-does-jaxb-compare-to-simple.html">How Does JAXB Compare to Simple</a>, since I have just built a leight-weight xml and json binding framework called <a href="http://github.com/bulldog2011/nano">Nano</a>, in this post I&#8217;ll run a similar comparison between Nano and JAXB. By the way, since I am a lazy developer, I shamelessly copied much content from that post:), anyway, part of the content of this post should be contributed to the original author of that post.</p>

<!--more-->


<h3>Java Model</h3>

<p>We will use the following model for this example. The classes represent customer data. The get/set methods have been omitted to save space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Customer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">phoneNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Customer Data</h3>

<p>The following instance of Customer will be marshalled to XML using both Nano and JAXB.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Data</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Customer</span> <span class="n">CUSTOMER</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>    <span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">CUSTOMER</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="o">();</span>
</span><span class='line'>      <span class="n">CUSTOMER</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">123</span><span class="o">);</span>
</span><span class='line'>      <span class="n">CUSTOMER</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;Jane Doe&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">();</span>
</span><span class='line'>        <span class="n">address</span><span class="o">.</span><span class="na">setStreet</span><span class="o">(</span><span class="s">&quot;1 A Street&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">address</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="s">&quot;Any Town&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">CUSTOMER</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">PhoneNumber</span> <span class="n">workPhoneNumber</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PhoneNumber</span><span class="o">();</span>
</span><span class='line'>        <span class="n">workPhoneNumber</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="s">&quot;work&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">workPhoneNumber</span><span class="o">.</span><span class="na">setNumber</span><span class="o">(</span><span class="s">&quot;555-WORK&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">CUSTOMER</span><span class="o">.</span><span class="na">getPhoneNumbers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">workPhoneNumber</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">PhoneNumber</span> <span class="n">cellPhoneNumber</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PhoneNumber</span><span class="o">();</span>
</span><span class='line'>        <span class="n">cellPhoneNumber</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="s">&quot;cell&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">cellPhoneNumber</span><span class="o">.</span><span class="na">setNumber</span><span class="o">(</span><span class="s">&quot;555-CELL&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">CUSTOMER</span><span class="o">.</span><span class="na">getPhoneNumbers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">cellPhoneNumber</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Marshall Code</h3>

<p>This is the code we will use to convert the objects to XML.</p>

<h4>Nano</h4>

<p>The following code will be used to marshall the instance of Customer to an OutputStream.
The Nano code is quite compact. A little technical details here, the xmlWriter instance got from NanoFactory is thread safe, and unlike JAXB, Nano internally uses an on-demand strategy to scan mapping metadata before real marshalling (and unmarshalling), metadata scan happens once per class, and then the mapping metadata will be cached.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.domain.nano.NanoData</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.NanoFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NanoDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLWriter</span><span class="o">();</span>
</span><span class='line'>      <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">NanoData</span><span class="o">.</span><span class="na">CUSTOMER</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<p>The following code will be used to marshall the instance of Customer to an OutputStream. A couple of differences are already apparent:</p>

<blockquote><ol>
<li>A JAXBContext needs to be initialized on the binding metadata before the marshal operation can occur. This initialization enables JAXB to optimize how the convertion will be done. The JAXB Context is thread safe and only needs to be created once.</li>
<li>Unlike Nano, JAXB does not format the XML by default, so we will enable this feature.</li>
<li>With no metadata specified we need to supply JAXB with a root element name (and namespace).</li>
</ol>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.JAXBContext</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.JAXBElement</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.Marshaller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.namespace.QName</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.domain.jaxb.Customer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.domain.jaxb.JaxbData</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JaxbDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">JAXBContext</span> <span class="n">jc</span> <span class="o">=</span> <span class="n">JAXBContext</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">Customer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">Marshaller</span> <span class="n">marshaller</span> <span class="o">=</span> <span class="n">jc</span><span class="o">.</span><span class="na">createMarshaller</span><span class="o">();</span>
</span><span class='line'>        <span class="n">marshaller</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="n">Marshaller</span><span class="o">.</span><span class="na">JAXB_FORMATTED_OUTPUT</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">JAXBElement</span><span class="o">&lt;</span><span class="n">Customer</span><span class="o">&gt;</span> <span class="n">jaxbElement</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JAXBElement</span><span class="o">&lt;</span><span class="n">Customer</span><span class="o">&gt;(</span><span class="k">new</span> <span class="n">QName</span><span class="o">(</span><span class="s">&quot;customer&quot;</span><span class="o">),</span> <span class="n">Customer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">JaxbData</span><span class="o">.</span><span class="na">CUSTOMER</span><span class="o">);</span>
</span><span class='line'>        <span class="n">marshaller</span><span class="o">.</span><span class="na">marshal</span><span class="o">(</span><span class="n">jaxbElement</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Default XML Output</h3>

<p>First we will examine the XML output produced by both Nano and JAXB if no metadata is used to customize the output.</p>

<h4>Nano</h4>

<p>Nano will only output a root tag if no metadata has been defined</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39; ?&gt;</span>
</span><span class='line'><span class="nt">&lt;customer</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will instract Nano to marshall all fields to default Xml Elements by adding @Default annotation on all classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Customer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">phoneNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now Nano will produce following XML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer&gt;</span>
</span><span class='line'>  <span class="nt">&lt;id&gt;</span>123<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>  <span class="nt">&lt;address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;street&gt;</span>1 A Street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>    <span class="nt">&lt;city&gt;</span>Any Town<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Jane Doe<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phoneNumbers&gt;</span>
</span><span class='line'>    <span class="nt">&lt;number&gt;</span>555-WORK<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>work<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/phoneNumbers&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phoneNumbers&gt;</span>
</span><span class='line'>    <span class="nt">&lt;number&gt;</span>555-CELL<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;type&gt;</span>cell<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/phoneNumbers&gt;</span>
</span><span class='line'><span class="nt">&lt;/customer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<p>JAXB will produces the followinig XML.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;address&gt;</span>
</span><span class='line'>        <span class="nt">&lt;city&gt;</span>Any Town<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>        <span class="nt">&lt;street&gt;</span>1 A Street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>123<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Jane Doe<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phoneNumbers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-WORK<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>work<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phoneNumbers&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phoneNumbers&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-CELL<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>cell<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phoneNumbers&gt;</span>
</span><span class='line'><span class="nt">&lt;/customer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Field Access</h3>

<p>For this example we will configure our XML binding tools to interact directly with the fields(instance variables).</p>

<h4>Nano</h4>

<p>Nano uses field access by default and only supports field access.</p>

<h4>JAXB</h4>

<p>By default JAXB will access public fields and properties. We can configure JAXB to use field access with the following package level annotation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@XmlAccessorType</span><span class="o">(</span><span class="n">XmlAccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">jaxb</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAccessType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAccessorType</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Renaming Elements</h3>

<p>Next we will look at how to tweak the XML output using the appropriate mapping metadata. First we will rename some elements. As you will see the amount of configuration requried is almost identical.</p>

<h4>Nano</h4>

<p>For Nano, we will use @Element with a name parameter to configure the phoneNumbers property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;phone-number&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Customer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">phoneNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<p>For JAXB we will use @XmlRootElement to configure the root element, and @XmlElement to configure the phoneNumbers property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">jaxb</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlElement</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlRootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@XmlRootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;phone-number&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Customer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">phoneNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>XML Output</h4>

<p>At this point the same XML is being produced by Nano and JAXB.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>123<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Jane Doe<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;address&gt;</span>
</span><span class='line'>        <span class="nt">&lt;city&gt;</span>Any Town<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>        <span class="nt">&lt;street&gt;</span>1 A Street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>work<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-WORK<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>cell<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-CELL<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'><span class="nt">&lt;/customer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Change the Order of Elements</h3>

<p>We will tweak the document again to make sure that when marshalling an Address object the &#8220;street&#8221; element will always appear before the &#8220;city&#8221; element.</p>

<h4>Nano</h4>

<p>Current Nano framework does not support this feature.</p>

<h4>JAXB</h4>

<p>For JAXB we will use @XmlType to configure the ordering of elements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">jaxb</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlType</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@XmlType</span><span class="o">(</span><span class="n">propOrder</span><span class="o">={</span><span class="s">&quot;street&quot;</span><span class="o">,</span> <span class="s">&quot;city&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">street</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>XML Output</h4>

<p>The XML output by JAXB.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>123<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Jane Doe<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;address&gt;</span>
</span><span class='line'>        <span class="nt">&lt;street&gt;</span>1 A Street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>        <span class="nt">&lt;city&gt;</span>Any Town<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>work<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-WORK<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>cell<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-CELL<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'><span class="nt">&lt;/customer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mapping to an Attribute</h3>

<p>Now we will look at how to tweak the XML output using the appropriate mapping metadata to produce XML attributes. As you will see the amount of configuration required is almost identical.</p>

<h4>Nano</h4>

<p>For Nano we will use @Attribute to configure the id property to be represented as an XML attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;phone-number&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Customer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">phoneNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<p>For JAXB we will use @XmlAttribute to configure the id property to be represented as an XML attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">jaxb</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAttribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlElement</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlRootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@XmlRootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@XmlAttribute</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@XmlElement</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;phone-number&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Customer</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">phoneNumbers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>XML Output</h4>

<p>The XML output is the same for both JAXB and Nano.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer</span> <span class="na">id=</span><span class="s">&quot;123&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Jane Doe<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;address&gt;</span>
</span><span class='line'>        <span class="nt">&lt;street&gt;</span>1 A Street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>        <span class="nt">&lt;city&gt;</span>Any Town<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>work<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-WORK<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number&gt;</span>
</span><span class='line'>        <span class="nt">&lt;type&gt;</span>cell<span class="nt">&lt;/type&gt;</span>
</span><span class='line'>        <span class="nt">&lt;number&gt;</span>555-CELL<span class="nt">&lt;/number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'><span class="nt">&lt;/customer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mapping Objects to Simple Content</h3>

<p>To compact our document even further we will map the PhoneNumber class to a complex type with simple content.</p>

<h4>Nano</h4>

<p>With Nano we will use the @Attribute and @Value annotations on the PhoneNumber class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Value</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<p>For JAXB we will use the @XmlAttribute and @XmlValue annotations on the PhoneNumber class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">jaxb</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAttribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlValue</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneNumber</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@XmlAttribute</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@XmlValue</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>XML Output</h4>

<p>The XML output is the same for both JAXB and Nano.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer</span> <span class="na">id=</span><span class="s">&quot;123&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Jane Doe<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;address&gt;</span>
</span><span class='line'>        <span class="nt">&lt;street&gt;</span>1 A Street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>        <span class="nt">&lt;city&gt;</span>Any Town<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number</span> <span class="na">type=</span><span class="s">&quot;work&quot;</span><span class="nt">&gt;</span>555-WORK<span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;phone-number</span> <span class="na">type=</span><span class="s">&quot;cell&quot;</span><span class="nt">&gt;</span>555-CELL<span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'><span class="nt">&lt;/customer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Applying Namespaces</h3>

<p>We will now namespace qualify the XML document.</p>

<h4>Nano</h4>

<p>We will use the @RootElement with a namespace parameter to specify a namespace for the Customer class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">nano</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Default</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.RootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Default</span>
</span><span class='line'><span class="nd">@RootElement</span><span class="o">(</span><span class="n">namespace</span><span class="o">=</span><span class="s">&quot;http://www.example.com&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;phone-number&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">PhoneNumber</span><span class="o">&gt;</span> <span class="n">phoneNumbers</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<p>We can configure the namespace information using the @XmlScheam package level annotation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@XmlAccessorType</span><span class="o">(</span><span class="n">XmlAccessType</span><span class="o">.</span><span class="na">FIELD</span><span class="o">)</span>
</span><span class='line'><span class="nd">@XmlSchema</span><span class="o">(</span><span class="n">namespace</span><span class="o">=</span><span class="s">&quot;http://www.example.com&quot;</span><span class="o">,</span>
</span><span class='line'><span class="n">elementFormDefault</span><span class="o">=</span><span class="n">XmlNsForm</span><span class="o">.</span><span class="na">QUALIFIED</span><span class="o">)</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">domain</span><span class="o">.</span><span class="na">jaxb</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAccessType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlAccessorType</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlNsForm</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.xml.bind.annotation.XmlSchema</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>XML Output</h4>

<h4>Nano</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer</span> <span class="na">id=</span><span class="s">&quot;123&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.example.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;street&gt;</span>1 A Street<span class="nt">&lt;/street&gt;</span>
</span><span class='line'>    <span class="nt">&lt;city&gt;</span>Any Town<span class="nt">&lt;/city&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/address&gt;</span>
</span><span class='line'>  <span class="nt">&lt;name&gt;</span>Jane Doe<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phone-number</span> <span class="na">type=</span><span class="s">&quot;work&quot;</span><span class="nt">&gt;</span>555-WORK<span class="nt">&lt;/phone-number&gt;</span>
</span><span class='line'>  <span class="nt">&lt;phone-number</span> <span class="na">type=</span><span class="s">&quot;cell&quot;</span><span class="nt">&gt;</span>555-CELL<span class="nt">&lt;/phone-number&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;customer</span> <span class="na">xmlns:ns2=</span><span class="s">&quot;http://www.example.com&quot;</span> <span class="na">id=</span><span class="s">&quot;123&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:name&gt;</span>Jane Doe<span class="nt">&lt;/ns2:name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:address&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ns2:street&gt;</span>1 A Street<span class="nt">&lt;/ns2:street&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ns2:city&gt;</span>Any Town<span class="nt">&lt;/ns2:city&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ns2:address&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:phone-number</span> <span class="na">type=</span><span class="s">&quot;work&quot;</span><span class="nt">&gt;</span>555-WORK<span class="nt">&lt;/ns2:phone-number&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ns2:phone-number</span> <span class="na">type=</span><span class="s">&quot;cell&quot;</span><span class="nt">&gt;</span>555-CELL<span class="nt">&lt;/ns2:phone-number&gt;</span>
</span><span class='line'><span class="nt">&lt;/customer&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JSON Support</h3>

<p>It is perferred that a binding framework can produce not only XML but also JSON.</p>

<h4>Nano</h4>

<p>Nano supports this feature, we only need to get a jsonWriter from Nanofactory then do marshalling:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.domain.nano.NanoData</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.NanoFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NanoDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLWriter</span><span class="o">();</span>
</span><span class='line'>      <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">NanoData</span><span class="o">.</span><span class="na">CUSTOMER</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">IWriter</span> <span class="n">jsonWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getJSONWriter</span><span class="o">();</span>
</span><span class='line'>      <span class="n">jsonWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">NanoData</span><span class="o">.</span><span class="na">CUSTOMER</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>JAXB</h4>

<p>As I know, without external library support, JAXB does not support json binding directly.</p>

<h4>JSON Output</h4>

<p>Below is the json produced by Nano:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="nt">&quot;customer&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;@id&quot;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;address&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;city&quot;</span><span class="p">:</span> <span class="s2">&quot;Any Town&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;street&quot;</span><span class="p">:</span> <span class="s2">&quot;1 A Street&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Jane Doe&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;phone-number&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;@type&quot;</span><span class="p">:</span> <span class="s2">&quot;work&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;__value__&quot;</span><span class="p">:</span> <span class="s2">&quot;555-WORK&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;@type&quot;</span><span class="p">:</span> <span class="s2">&quot;cell&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;__value__&quot;</span><span class="p">:</span> <span class="s2">&quot;555-CELL&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Android Support</h3>

<p>Android mobile platfrom is quite popular these days, it would be nice if a binding framework can support Android platform.</p>

<h4>Nano</h4>

<p>Nano is tailored for Android platform, I will show you how to use Nano on Android platform in my later posts.</p>

<h4>JAXB</h4>

<p>JAXB does not support Android platform, even if some people made it run on Android, the performance will be very bad since JAXB a heavy weight enterprise library targeting desktop and server side development, not mobile development.</p>

<h3>Summary</h3>

<p>Both Nano and JAXB are quite easy to do simple binding stuff. If you need a mature binding framework for enterprise development, JAXB is the way to go; If you just need a light-weight alternative, or you need to do binding work on Android platform, Nano is definitely the way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano list tutorial]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/05/nano-list-tutorial/"/>
    <updated>2013-02-05T21:12:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/05/nano-list-tutorial</id>
    <content type="html"><![CDATA[<p>In this tutorial, I will show you how to marshall and unmarshall list of objects using Nano binding framework.</p>

<!--more-->


<h3>1. Create Bean Class</h3>

<p>Create a new Book class like below:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.RootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RootElement</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;book&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Element</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Element</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Element</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">publisher</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Element</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAuthor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAuthor</span><span class="o">(</span><span class="n">String</span> <span class="n">author</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPublisher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">publisher</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPublisher</span><span class="o">(</span><span class="n">String</span> <span class="n">publisher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">publisher</span> <span class="o">=</span> <span class="n">publisher</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getIsbn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIsbn</span><span class="o">(</span><span class="n">String</span> <span class="n">isbn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">isbn</span> <span class="o">=</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;Book [name=&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;, author=&quot;</span> <span class="o">+</span> <span class="n">author</span> <span class="o">+</span> <span class="s">&quot;, publisher=&quot;</span>
</span><span class='line'>              <span class="o">+</span> <span class="n">publisher</span> <span class="o">+</span> <span class="s">&quot;, isbn=&quot;</span> <span class="o">+</span> <span class="n">isbn</span>  <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is simple bean class containing Nano annotations, indicating this is a Nano bindable class. When a top level class is annotated with @RootElement, then its instance maps to XML element, in our case &lt;book&gt; tag. At field level, all fields of Book are annotated with @Element, indicating these fileds map to XML elements.</p>

<h3>2. Create Container Class to Hold List of Objects</h3>

<p>Now we need to create a new Class &#8220;Books.java&#8221; as container to hold the list of Book objects by having an ArrayList instance in our class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Books</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nd">@Element</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;book&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Books</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Books</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">books</span> <span class="o">=</span> <span class="n">books</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="nf">getBooks</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">books</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBooks</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">books</span> <span class="o">=</span> <span class="n">books</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just annotate the books field with @Element annotation, then Nano framework will handle list marshalling or unmarshalling automatically for us.</p>

<h3>3. Create a Java Main Client</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.NanoFactory</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * A demo show Nano list handling</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author bulldog</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListExample</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Book</span> <span class="n">bookOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Book</span><span class="o">();</span>
</span><span class='line'>      <span class="n">bookOne</span><span class="o">.</span><span class="na">setAuthor</span><span class="o">(</span><span class="s">&quot;Kathy Sierra&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bookOne</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;SCJP&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bookOne</span><span class="o">.</span><span class="na">setPublisher</span><span class="o">(</span><span class="s">&quot;Tata McGraw Hill&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bookOne</span><span class="o">.</span><span class="na">setIsbn</span><span class="o">(</span><span class="s">&quot;856-545456736&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Book</span> <span class="n">bookTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Book</span><span class="o">();</span>
</span><span class='line'>      <span class="n">bookTwo</span><span class="o">.</span><span class="na">setAuthor</span><span class="o">(</span><span class="s">&quot;Christian Bauer&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bookTwo</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;Java Persistence with Hibernate&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bookTwo</span><span class="o">.</span><span class="na">setPublisher</span><span class="o">(</span><span class="s">&quot;Manning&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bookTwo</span><span class="o">.</span><span class="na">setIsbn</span><span class="o">(</span><span class="s">&quot;978-3832180577&quot;</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">bookList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;();</span>
</span><span class='line'>      <span class="n">bookList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bookOne</span><span class="o">);</span>
</span><span class='line'>      <span class="n">bookList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bookTwo</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">Books</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Books</span><span class="o">();</span>
</span><span class='line'>      <span class="n">books</span><span class="o">.</span><span class="na">setBooks</span><span class="o">(</span><span class="n">bookList</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLWriter</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">books</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;books.xml&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">IReader</span> <span class="n">xmlReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLReader</span><span class="o">();</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">books</span> <span class="o">=</span> <span class="n">xmlReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">Books</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;books.xml&quot;</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">books</span><span class="o">.</span><span class="na">getBooks</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><ol>
<li>In the main method, we create two Book objects and store them in an ArrayList, then we create a Books container object and put the book list into it.</li>
<li>We use a Nano xml writer instance to write the Books object to an xml file.</li>
<li>We use a Nano xml reader instance to read the xml file back into Books object.</li>
<li>Finally, we print the list of books(which will eventually call toString() on Book object).</li>
</ol>
</blockquote>

<h3>4. Output</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Book [name=SCJP, author=Kathy Sierra, publisher=Tata McGraw Hill, isbn=856-545456736], Book [name=Java Persistence with Hibernate, author=Christian Bauer, publisher=Manning, isbn=978-3832180577]]</span></code></pre></td></tr></table></div></figure>


<p>Refesh your project in IDE(eclipse in my case) to see the generated XML file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version='1.0' encoding='utf-8' ?>
</span><span class='line'>&lt;books>
</span><span class='line'>  &lt;book>
</span><span class='line'>    &lt;author>Kathy Sierra&lt;/author>
</span><span class='line'>    &lt;isbn>856-545456736&lt;/isbn>
</span><span class='line'>    &lt;name>SCJP&lt;/name>
</span><span class='line'>    &lt;publisher>Tata McGraw Hill&lt;/publisher>
</span><span class='line'>  &lt;/book>
</span><span class='line'>  &lt;book>
</span><span class='line'>    &lt;author>Christian Bauer&lt;/author>
</span><span class='line'>    &lt;isbn>978-3832180577&lt;/isbn>
</span><span class='line'>    &lt;name>Java Persistence with Hibernate&lt;/name>
</span><span class='line'>    &lt;publisher>Manning&lt;/publisher>
</span><span class='line'>  &lt;/book>
</span><span class='line'>&lt;/books></span></code></pre></td></tr></table></div></figure>


<h3>5. Project Source</h3>

<p>You can get the whole source of this project <a href="https://github.com/bulldog2011/nano/tree/master/sample/nanolist">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano hello world]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/05/nano-hello-world/"/>
    <updated>2013-02-05T18:35:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/05/nano-hello-world</id>
    <content type="html"><![CDATA[<p><strong><em>Nano</em></strong> is my light-weight xml/json binding framework, it is a light-weight alternative to JAXB. Both Nano and JAXB are annotation driven, you annotate your domain classes, then use Nano or JAXB to convert Java POJO to/from XML.Two highlights of Nano are :</p>

<blockquote><ol>
<li>Tailored for Android platform.</li>
<li>Support both xml and json binding.</li>
</ol>
</blockquote>

<p>In this tutorial, I will show you simple usage of Nano in normal Java environment, in later posts, I will show you how to use Nano on Androd platform.</p>

<!--more-->


<h4>Basic concepts:</h4>

<blockquote><ol>
<li>Marshalling or Serialization - Convert a Java object into a Xml or Json content.</li>
<li>Unmarshalling or Deserialization - Convert Xml or Json content to a Java object.</li>
</ol>
</blockquote>

<h4>Prerequisite:</h4>

<blockquote><ol>
<li>JDK 1.6 or above</li>
<li>Nano 0.6.1 or above</li>
</ol>
</blockquote>

<p>Working with Nano is easy, just annotate your domain class with Nano annotations, later use nanoWriter.write() or nanoReader.read() to do the object / Xml(or Json) conversion.</p>

<h3>1. Nano Dependency</h3>

<p>Latest Nano can be downloaded by following link <a href="https://github.com/bulldog2011/nano">here</a>, extract the zip file, and put all 3 jars in lib folder on your project classpath.<br/>
<strong><em>Note</em></strong>:<br/>
On normal Java platform, Nano depends on Kxml and org.json library, however, on Android, Nano has no such dependency, since Kxml and org.json are built in Android Platform.</p>

<h3>2. Nano Annotation</h3>

<p>For object that needs to be converted to / from XML file, it has to be annotated with Nano annotations. The annotations are pretty self-explanatory, see sample below:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.RootElement</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Element</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nd">@Attribute</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;[name=&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span><span class="s">&quot;, age=&quot;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">&quot;, id=&quot;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On class level, RootElement(optional) annotation indicates that this class is Nano bindable, on field level, Element annotation indicates that this field maps to an Xml element, Attribute annotation indicates that this filed maps to an Xml attribute.<br/>
<strong><em>Note</em></strong><br/>
field level annotations can only be used on fields(private is ok), not on getter or setter methods.</p>

<h3>3. Convert Object to Xml or Json</h3>

<p>Instantiate an object, get an Xml or Json writer instance from NanoFactory class, then write the object to output(file, console or plain string).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Customer</span> <span class="n">customer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="o">();</span>
</span><span class='line'><span class="n">customer</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="n">customer</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;bulldog&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">customer</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Marshalling</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">File</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.xml&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// for pretty output</span>
</span><span class='line'>  <span class="n">Format</span> <span class="n">format</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Format</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLWriter</span><span class="o">(</span><span class="n">format</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">xmlFile</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;xml output : &quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">File</span> <span class="n">jsonFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.json&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">IWriter</span> <span class="n">jsonWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getJSONWriter</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">jsonWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">jsonFile</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;json output : &quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">jsonWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div></figure>


<p>Output</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xml output : 
</span><span class='line'>&lt;?xml version='1.0' encoding='utf-8' ?>
</span><span class='line'>&lt;customer id="100">
</span><span class='line'>  &lt;age>30&lt;/age>
</span><span class='line'>  &lt;name>bulldog&lt;/name>
</span><span class='line'>&lt;/customer>
</span><span class='line'>json output : 
</span><span class='line'>{"customer":{"@id":100,"age":30,"name":"bulldog"}}</span></code></pre></td></tr></table></div></figure>


<h3>4. Convert XML or JSON back to Object</h3>

<p>Get an Xml or Json reader instance from NanoFactory class, then read content(has just been written above) back into object instance.<br/>
Note that when you read back, you need to explictly tell Nano the target class name.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Unmarshalling</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">File</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.xml&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">IReader</span> <span class="n">xmlReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLReader</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">customer</span> <span class="o">=</span> <span class="n">xmlReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">Customer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">xmlFile</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;customer read from xml : &quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customer</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">File</span> <span class="n">jsonFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.json&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">IReader</span> <span class="n">jsonReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getJSONReader</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">customer</span> <span class="o">=</span> <span class="n">jsonReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">Customer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">jsonFile</span><span class="o">));</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;customer read from json : &quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customer</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>      
</span></code></pre></td></tr></table></div></figure>


<p>Output</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>customer read from xml : 
</span><span class='line'>[name=bulldog, age=30, id=100]
</span><span class='line'>customer read from json : 
</span><span class='line'>[name=bulldog, age=30, id=100]</span></code></pre></td></tr></table></div></figure>


<h3>5. Now Your Turn</h3>

<p>The usage of Nano can&#8217;t be simpler, now it&#8217;s your turn to try Nano framework, if necessary, you can find the whole source of this tutorial <a href="https://github.com/bulldog2011/nano/tree/master/sample/helloworld">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Producing and consuming 4TB log daily on one commodity machine]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/01/28/log-collecting/"/>
    <updated>2013-01-28T13:10:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/01/28/log-collecting</id>
    <content type="html"><![CDATA[<p>I have built a <a href="https://github.com/bulldog2011/bigqueue">big queue</a>, and I have <a href="http://bulldog2011.github.com/blog/2013/01/27/thrift-queue/">turned it into a Thrift based queue service</a>, in this post, I will show you how to collect logs using this queue service, also, I will show some performance number to let you know the capability of big queue as a log collecting tool.</p>

<h3>Collecting and Consuming Logs using Thrift based Queue Serivce</h3>

<p>Big queue was originally designed for log collecting and analysis scenario, it&#8217;s very simple to collecting logs using big queue, all you need to do are:</p>

<!--more-->


<blockquote><p>At producing/collecting side:</p></blockquote>

<pre><code>    1. Generate Log accoding to your app logic  
    2. Serialize it into binary data  
    3. Put the data into big queue through Thrift RPC call. 
</code></pre>

<blockquote><p>At consuming/analysis side:</p></blockquote>

<pre><code>    1. Pull data from big queue through Thrift RPC call  
    2. Deserialize data into log object  
    3. Analyze log according your real needs.
</code></pre>

<p>That&#8217;s it.</p>

<p>Big queue only accepts binary data as input and will return binary data as output, so you are responsible for the serialization/deserialization part, I would recommend Thrift as as a serialization protocol since it is light-weight, high performance and cross-language, here is a simple log format I defined using Thrift IDL(Note: this is the bare minimum, you need to adapt and enhance according to your real needs):</p>

<pre><code>    namespace java com.leansoft.logging.thrift

    // The level of log event
    enum LogLevel {
      DEBUG = 0,
      INFO = 1,
      WARN = 2,
      ERROR = 3,
      FATAL = 4
    }

    struct LogEvent
    {
        1: i64 createdTime,
        2: string hostId,
        3: LogLevel logLevel,
        4: string message
    }
</code></pre>

<p>With log format defined, I can easily generate class for my target lanague, like Java or CSharp, then with TSerializer and TDeserializer helpers from Thrift, I can easilty serialize log object into binary data or deserialize binary data back into log object, this is typcial serialization use case of Thrift.</p>

<p>You many choose any other serialization framework(like protocol buffer, Avro, etc) you like, big queue is serialization independent, it only sees bytes without caring about content inside the bytes.</p>

<p><a href="https://github.com/bulldog2011/bigqueue/tree/master/samples/thriftqueue/src/com/leansoft/thriftqueue/load">Here</a> are the code I used to test the log collecting capability of big queue, you may find it useful.</p>

<p>By the way, this is just the bare minimum, in real world, you may build &#8216;Agent&#8217; which encapsulates all details above and only expose simple interface to outside user for log collecting, inside the &#8216;Agent&#8217;, some optimizations like async batching and compression can further improve the performance of the log collector.</p>

<h3>Performance Test</h3>

<p>I&#8217;ve did some basic performance test to validate the performance of my Thrift based queue service, the full hardware spec for server is <a href="http://bulldog2011.github.com/lab/">here</a>, on the client side, I just used my ordinary notebook(Intel i5 2.5GHz CPU, 10G memory and Win7 OS) to simulate multiple clients producing and consuming scenario, full source is <a href="https://github.com/bulldog2011/bigqueue/tree/master/samples/thriftqueue/src/com/leansoft/thriftqueue/load">here</a>, I used a cheap 1Gbps switch between server and clients to simulate reald world scenarion, below are the performance numbers:</p>

<ol>
<li>Sequential Test - Producing then Consuming</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*******************************************************
</span><span class='line'>Producer Report:
</span><span class='line'>*******************************************************
</span><span class='line'>Log producer thread number : 50
</span><span class='line'>Test duration(s) : 279.144
</span><span class='line'>Total logs sent : 10000000
</span><span class='line'>Log sending success count : 10000000
</span><span class='line'>Log sending failure count : 0
</span><span class='line'>Log sending exception count : 0
</span><span class='line'>Total byes produced : 20105400000
</span><span class='line'>Average log size(byte) : 2010.54
</span><span class='line'>Throughput(MB/s) : 68.68857507621235
</span><span class='line'>Average log sending delay(ms) : 1.2961799
</span><span class='line'>
</span><span class='line'>*******************************************************
</span><span class='line'>Consumer Report:
</span><span class='line'>*******************************************************
</span><span class='line'>Log consumer thread number : 50
</span><span class='line'>Test duration(s) : 274.157
</span><span class='line'>Total logs received : 10000000
</span><span class='line'>Log receiving success count : 10000000
</span><span class='line'>Log receiving failure count : 0
</span><span class='line'>Log receiving exception count : 0
</span><span class='line'>Total byes received : 20105400000
</span><span class='line'>Average log size(byte) : 2010.54
</span><span class='line'>Throughput(MB/s) : 69.93804134519353
</span><span class='line'>Average log receiving delay(ms) : 1.3691828</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Concurrent Test - Producing and Consuming currently</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*******************************************************
</span><span class='line'>Concurrency Test Report:
</span><span class='line'>*******************************************************
</span><span class='line'>Producer Report:
</span><span class='line'>*******************************************************
</span><span class='line'>Log producer thread number : 50
</span><span class='line'>Test duration(s) : 395.692
</span><span class='line'>Total logs sent : 10000000
</span><span class='line'>Log sending success count : 10000000
</span><span class='line'>Log sending failure count : 0
</span><span class='line'>Log sending exception count : 0
</span><span class='line'>Total byes produced : 21588200000
</span><span class='line'>Average log size(byte) : 2158.82
</span><span class='line'>Throughput(MB/s) : 52.03064979186187
</span><span class='line'>Average log sending delay(ms) : 1.8724801
</span><span class='line'>
</span><span class='line'>*******************************************************
</span><span class='line'>Consumer Report:
</span><span class='line'>*******************************************************
</span><span class='line'>Log consumer thread number : 50
</span><span class='line'>Test duration(s) : 395.692
</span><span class='line'>Total logs received : 10000000
</span><span class='line'>Log receiving success count : 10000000
</span><span class='line'>Log receiving failure count : 0
</span><span class='line'>Log receiving exception count : 0
</span><span class='line'>Total byes received : 21588200000
</span><span class='line'>Average log size(byte) : 2158.82
</span><span class='line'>Throughput(MB/s) : 52.03064979186187
</span><span class='line'>Average log receiving delay(ms) : 1.8693821</span></code></pre></td></tr></table></div></figure>


<p>Even in concurrent scenario, big queue can concurrently producing and consuming around 50MBbs log data, this is equal to 50 * 3600 * 24 / (1024 * 1024) = 4.11 TB daily, amazing!</p>

<p>Regarding resource usage, CPU and memory usage on both server side and client side are under normal load, while network and disk IO are quite high on server side.
According to my observation, big queue is extremely fast, only limited by network and disk IO bandwidth.</p>

<h3>Final Word</h3>

<p>Big queue is extremely fast, only limited by network and disk IO bandwidth, while at the same time it&#8217;s persistent and reliable, this makes big queue a nature fit for log data collecting and analysis, I would recommend you to try big queue as a log collecting tool and let me know your real world experience with big queue by leaving feedback on this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turn Big Queue into a Thrift based Queue Serivce]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/01/27/thrift-queue/"/>
    <updated>2013-01-27T21:01:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/01/27/thrift-queue</id>
    <content type="html"><![CDATA[<p>In this post, I will show you how to add a Thrift RPC component to my <a href="https://github.com/bulldog2011/bigqueue">big queue</a> library to turn it into a light-weigth queue service.</p>

<h3>Why I choose Thrift?</h3>

<p>I love Thrift so much that I can&#8217;t help recommending and dumpling all of its good parts here:</p>

<!--more-->


<p></p>

<blockquote><ol>
<li>Thrift is <strong><em>stable and mature</em></strong>, it is created by Facebook, now it&#8217;s an Apache project, it has been successfully used by famous projects like Cassandra and HBase.</li>
<li>Thrift is <strong><em>simple and light-weight</em></strong>, you just need to define a simple interface using its light-weight IDL(interface definition language), then you can auto-generate basic server and client proxy code without much effort, this can not only minimize development effort, but later upgrading effort - you just need to update the IDL then re-generate.</li>
<li>Thrift has <strong><em>high performance</em></strong>, it provides highly effective serialization protocols like TBinaryProtocol and service model like TNonBlockingServer, so you won&#8217;t get troubled with building your own NIO server which is very tricky.</li>
<li>Thrift has good <strong><em>cross-language</em></strong> support, such as java, csharp, php, ruby, just name a few. One big factor I choose Thrift is - everytime I build a Thrift service, clients for different language platforms are basically ready, If I need a client for languge X, I can easily generate one using its universal code generator.</li>
<li>Thrift is <strong><em>flexible</em></strong>, Thrift has a pluggable architecture, transport protocols(like tcp or http), serialization protocol(like TBinaryProtocol, TJSONProtocol) and server models(like TNonBlockingServer, TThreadPoolServer) are all changeable according to your real needs.</li>
</ol>
</blockquote>

<p>Basically, I think guys at Facebook have made a really cool RPC framework, greatly simplified service development.</p>

<h3>The Basic Steps to Turn Big Queue into Thrift Serivce</h3>

<p>I won&#8217;t show much details about thrift and its development here, since there are already many reference and turtorils out there, If you need more information about Thrift, visit its <a href="http://thrift.apache.org">official site</a> and <a href="http://wiki.apache.org/thrift/">wiki</a>, I just list the basic steps to turn my big queue into a Thrift service here, in case you need to do similar things later, the whole source is <a href="https://github.com/bulldog2011/bigqueue/tree/master/samples/thriftqueue">here</a>.</p>

<ol>
<li><p><strong><em>Define serivce interface using Thrift IDL</em></strong> <br/>
Below is the IDL I defined for my big queue, basically, this interface mirrors the big queue interface, one new thing I added is &#8220;topic&#8221; support, with topic, client can enqueue into or dequeue from different topics(queues), just like topic semantics in messaging system, in fact, topic corresponds to queue name, if a topic does not exist when client enqueue, server will create a new queue for this topic before enqueue.</p>

<pre><code>  namespace java com.leansoft.bigqueue.thrift
  namespace csharp Leansoft.BigQueue.Thrift

  struct QueueRequest {
      1: required binary data
  }

  enum ResultCode
  {
    SUCCESS,
    FAILURE
  }

  struct QueueResponse {
      1: required ResultCode resultCode,
      2: binary data
  }

  service BigQueueService {
      QueueResponse enqueue(1:string topic, 2:QueueRequest req);
      QueueResponse dequeue(1:string topic);
      QueueResponse peek(1:string topic);
      i64 getSize(1:string topic);
      bool isEmpty(1:string topic);
  }
</code></pre></li>
<li><p><strong><em>Genenerate proxy code using Thrift code generator</em></strong><br/>
This is quite easy by using the command line tool, <br/>
to generate java code, use:</p>

<pre><code>  thrift-0.6.1.exe --gen java queue.idl
</code></pre>

<p>to generate csharp code, use:</p>

<pre><code>  thrift-0.6.1.exe --gen csharp queue.idl
</code></pre>

<p>After generation, copy or link generated code into project as source.</p></li>
<li><p><strong><em>Implement serivce interface on server side</em></strong>
Still quite easy, just delegate all queue operations to the real big queue, a topic to queue map is added to support topic semantics, source <a href="https://github.com/bulldog2011/bigqueue/blob/master/samples/thriftqueue/src/com/leansoft/thriftqueue/server/ThriftQueueServiceImpl.java">here</a>.</p></li>
<li><p><strong><em>Implement server</em></strong>
Using Thrift, a server can be built with less than 20 lines of code, source <a href="https://github.com/bulldog2011/bigqueue/blob/master/samples/thriftqueue/src/com/leansoft/thriftqueue/server/ThriftQueueServer.java">here</a>, I chosed TBinaryProtocol(which has good serialization performance) as serialization protocol, and TNonblockingServer(which has good performance even with large amount of concurrent connections) as server model, you may try different ones according to your real needs.</p></li>
<li><p><strong><em>Implement client</em></strong>
On client side, you just need to create a thrift client which also implements the BigQueueService interface defined above, then call methods on the serivce client according to your real needs, and close the client finally. That&#8217;s it. Java client code is <a href="https://github.com/bulldog2011/bigqueue/blob/master/samples/thriftqueue/src/com/leansoft/thriftqueue/client/ThriftQueueClientDemo.java">here</a>. How about client for other languages? quite easy, I just built a csharp client within 30 minutes, code <a href="https://github.com/bulldog2011/bigqueue/tree/master/samples/thriftqueue/CSharpClient">here</a>.</p></li>
</ol>


<p>Now let&#8217;s check the working of the queue service, start the server first, than run the client demo, if everything works fine, the client can interact with the queue on server smoothly, if not, do some troubleshooting, or ask me for help by replying this post.</p>

<p><strong><em>Note:</em></strong> this is just the bare minimum queue service I introduced to you, in real world, you need to enhance and adapt it according to your real needs before putting it into production.</p>

<h3>Final Words</h3>

<p>Cool! I turned my big queue into a Thrift based queue service with less than 2 hours, this is agile development I am pursuing!</p>

<p>When compared with heavy-weight enterprise level messaging products like ActiveMQ or RabbitMQ, BigQueue with Thrift support is a quite light-weight, fast and persistent messaging framework, this is the <strong><em>just enough queue</em></strong> which can slove your business problem in agile and effective way, if you find this queue useful, don&#8217;t foget to let me know by leaving feedback at this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort and Search 100GB Data on a Single Machine]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/01/25/merge-sort-using-big-queue/"/>
    <updated>2013-01-25T18:01:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/01/25/merge-sort-using-big-queue</id>
    <content type="html"><![CDATA[<p>How to sort 100GB or more data in effective way? You may tell me to use Hadoop, oh, I know Hadoop can definitely do that, but the cost to build and maintain Hadoop always make me headache. Can we sort 100GB or more data on a single commodity machine with less than 8GB memory? The answer is yes, use a technology called <a href="http://en.wikipedia.org/wiki/External_sorting">external sorting</a>. Since I have just build a big, fast and persistent queue, I want to show you how to use my big queue to sort huge amount of data on a single machine with limited physical memory.</p>

<!--more-->


<p>The algorithm is a typical <a href="http://en.wikipedia.org/wiki/Merge_sort">merge sort algorithm</a>, I adapted it to only use my big queue, here are the detailed steps:</p>

<pre><code>1. put all your data into a queue called sourceQueue.
2. build a queue of sorted queues by dividing and sorting the sourceQueue.
    1. build a new queue called queueOfSortedQueues.
    2. extract n items out of the sourceQueue, n is the max num of items that can be sorted 
       in physical memory in one pass.
    3. sort n items in memory using any effective in memory sorting algorithm like quick sort.
    4. put n sorted items into a new queue and put the queue referece into the queueOfSortedQueues.
    5. repeat 2 - 4 until all items in sourceQueue have been consumed.
3. merge sort the queueOfSortedQueues
    1. extract n queues out of the queueOfSortedQueues, n must be &gt;= 2 but not be too big, 
       this is number of ways you want to merge sort in parallel.
    2. mergesort n queues and put the result sorted queue back into the queueOfSortedQueues
            1. build a new result queue for sorted items later.
            2. find out the lowest item in all n input queues by peeking the front of the queue
            3. extract the lowest item out of the queue and put the item into the result queue
            4. repeat 2 &amp; 3 until all items in n input queues have been consumed.
            5. put the result sorted queue back into the queueOfSortedQueues.
    3. repeat 1 &amp; 2 until there is only one left in the queueOfSortedQueues.
4. The last one left in the queueOfSortedQueues is the final sorted queue.
</code></pre>

<p><strong><em>Note</em></strong>: all queues mentioned above refer to my big queue except that queueOfSortedQueues is a normal in memory queue.</p>

<p>Basically, this is a typical divide and conqure algorithm, in order to sort data that is too big to be put into physical memory, you need to first divide the source data into chunks such that each chunk is small enough to be sorted in physical memory in one pass, after sorting all these small chunks, you need to merge and sort these chunks into the final sorted chunk, the merge and sort operation won&#8217;t consume much memory because it only needs to sequentially read chunks on external storage and sequentially write the final sorted chunk to exertnal storagte, only limited items are kept in memory for comparing and sorting in one turn.</p>

<p>Suppose you have 64GB data to sort, and your machine can only sort 2GB in one pass, then you divide 64GB data into 32 chunks with 2GB each,
then you sort 32 chunks in memory in turn, after in memory sorting finish, if you choose 32 way merge sort, you merge and sort all 32 chunks into one final chunk,
if you choose 4 way merge sort, then you need 8 + 2 + 1 = 11 rounds of merge sort to get the final sorted chunk.</p>

<p>I was able to sort 128GB data(each data item has 100 bytes) in 8.68 hours using my big queue structure and the algorithm above, basically, the sort speed is only limited by disk IO bandwidth,
if you are intested, you can find my merge sort code <a href="https://github.com/bulldog2011/bigqueue/tree/master/samples/sortsearch/src/com/leansoft/bigqueue/sample">here</a>, the code of multi-thread version is also included.</p>

<p>Another interesting thing is, after I sorted the big data, by leveraging my <a href="https://github.com/bulldog2011/bigqueue/tree/master/src/main/java/com/leansoft/bigqueue">indexed big array</a> structure and the typical <a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">binary search alogrithm</a> I can search more than 100GB sorted data in constant time(far less than 1 second on average), this is really amazing. If you are interested, find the source in the link mentioned above.</p>

<p>Any feedback to further improve my big queue sturucture and the merge sort alogrithm is welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Array Tutorial]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/01/24/big-array-tutorial/"/>
    <updated>2013-01-24T21:37:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/01/24/big-array-tutorial</id>
    <content type="html"><![CDATA[<p>This is a tutorial to show the basic API usage of big array, the source of this tutorial is <a href="https://github.com/bulldog2011/bigqueue/blob/master/src/test/java/com/leansoft/bigqueue/tutorial/BigArrayTutorial.java">here</a>.</p>

<p>Big array is a building block of big queue, since big array is also a valuable data struture with unique feature, I decided to write a separate tutorial for it.</p>

<p>The interface of big array is <a href="https://github.com/bulldog2011/bigqueue/blob/master/src/main/java/com/leansoft/bigqueue/IBigArray.java">here</a>, basically, it&#8217;s simple and similar to a typical indexed array except that big array is an append only array, you can&#8217;t randomly append data in big array like typical array after allocation, you can only append data on head of the array, although you can randomly read data by index in big array after you append data to it.</p>

<p>You can create(initialize) a new big array in just on statement:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// create a new big array</span>
</span><span class='line'><span class="n">IBigArray</span> <span class="n">bigArray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigArrayImpl</span><span class="o">(</span><span class="s">&quot;d:/bigarray/tutorial&quot;</span><span class="o">,</span> <span class="s">&quot;demo&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>the first parameter is a directory you want to store the array data file, the second parameter is the array name. Now you have a reference to an empty array.</p>

<!--more-->


<p>To append items into the array, you just call the <strong><em>append</em></strong> method on the array reference, here we append 10 numbers into the array:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// append some items into the array</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">item</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>  <span class="kt">long</span> <span class="n">index</span> <span class="o">=</span> <span class="n">bigArray</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The append operation will return an index of type long, this index can be used to retrive the appended data later, just like the index of normal array.<br/>
Big array index is incremental, starting from 0, upon successful append, it will be incremented to point to the next to be appended slot, internally, big array has two pointers, one is tail pointer, pointing to the first index of the array, the other is head pointer, pointing to the next to be appended index, to learn about the current tail index and head index of array, use <strong><em>getTailIndex</em></strong> and <strong><em>getHeadIndex</em></strong> methods on the interface.</p>

<p><strong><em>Note:</em></strong> the append method only accept byte array data as input, if your object is not byte array data, you are responsible to convert your object into byte array first before append, this is called serialization, when you get data later, you are also response to de-serialize the byte array data into your object format.</p>

<p>Now there are 10 items in the array, it&#8217;s not empty anymore, to find out the total number of items in the array, call the <strong><em>size</em></strong> method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// get current size of the array</span>
</span><span class='line'><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">bigArray</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Big array support random read by index, just call <strong><em>get</em></strong> method and provide the index to the data, just like normal array indexing operation, here we get 3 items from the array by index:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// randomly read items in the array</span>
</span><span class='line'><span class="n">String</span> <span class="n">item0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bigArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span> <span class="c1">// item0 equals to 0</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">item3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bigArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span> <span class="c1">// item3 equals to 3</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">item9</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bigArray</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">9</span><span class="o">));</span> <span class="c1">// item9 equals to 9</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: you can only get(retrive) data which has been appended before, if you want to get an index which has no data yet, you will get ArrayIndexOutOfBoundsException, this behavior is the same as typical array.</p>

<p>If you want to make empty the whole array, just call <strong><em>removeAll</em></strong> method like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// empty the big array</span>
</span><span class='line'><span class="n">bigArray</span><span class="o">.</span><span class="na">removeAll</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now all items in the array are removed, array tail and head has been be reset to 0, which means you can start to append data start from index 0 again.</p>

<p>When you finish with the array, just call <strong><em>close</em></strong> method to release resource used by the array, this is not mandatory, just a best practice, call close will release part of used memory immediately. Usually, you initialize big array in a try block and close it in the finally block, here is the usage paradigm:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// typical array initialization and closing paradigm</span>
</span><span class='line'><span class="n">IBigArray</span> <span class="n">bigArray</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">bigArray</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigArrayImpl</span><span class="o">(</span><span class="s">&quot;d:/bigarray/tutorial&quot;</span><span class="o">,</span> <span class="s">&quot;demo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">bigArray</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now its your turn to play with the big array, in this tutorial, I just used very small number of data, but actually the big array can hold lage amount of data, normal array has index of type int, but big array has index of type long, the total size is only limit by your avaiable disk space, so just try to append as much data as you can imagine, then randomly read data to find out how fast big array can be used to randomly access huge amout of data on disk. Also, please review test code of big array to learn more advanced usage like <a href="https://github.com/bulldog2011/bigqueue/tree/master/src/test/java/com/leansoft/bigqueue/load">multi-threads producing and consuming cases</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Big Queue Tutorial]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/01/24/big-queue-tutorial/"/>
    <updated>2013-01-24T20:17:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/01/24/big-queue-tutorial</id>
    <content type="html"><![CDATA[<p>This is a tutorial to show the basic API usage of big queue, the source of this tutorial is <a href="https://github.com/bulldog2011/bigqueue/blob/master/src/test/java/com/leansoft/bigqueue/tutorial/BigQueueTutorial.java">here</a>.</p>

<p>The interface of big queue is <a href="https://github.com/bulldog2011/bigqueue/blob/master/src/main/java/com/leansoft/bigqueue/IBigQueue.java">here</a>, basically, it&#8217;s as simple as the queue interface we learned in data structure course in college, if you want to refresh the concept of queue ADT, <a href="http://en.wikipedia.org/wiki/Queue_%28abstract_data_type%29">here is the wikipeida link</a>.</p>

<p>You can create(initialize) a new big queue in just one statement:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// create a new big queue</span>
</span><span class='line'><span class="n">IBigQueue</span> <span class="n">bigQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigQueueImpl</span><span class="o">(</span><span class="s">&quot;d:/bigqueue/tutorial&quot;</span><span class="o">,</span> <span class="s">&quot;demo&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>the first parameter is a directory you want to store the queue data file, the second parameter is the queue name. Now you have a reference to an empty queue.</p>

<!--more-->


<p>To add or produce item into the queue, you just call the <strong><em>enqueue</em></strong> method on the queue reference, here we enqueue 10 numbers into the queue:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// enqueue some items</span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">item</span> <span class="o">=</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>  <span class="n">bigQueue</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Note:</em></strong> the enqueue method only accept byte array data as input, if your object is not byte array data, you are responsible to convert your object into byte array first before enqueue, this is called serialization, when you dequeue later, you are also response to de-serialize the byte array data into your object format.</p>

<p>Now there are 10 items in the queue, and it&#8217;s not empty anymore, to find out the total number of items in the queue, call the <strong><em>size</em></strong> method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// get current size of the queue</span>
</span><span class='line'><span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">bigQueue</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <strong><em>peek</em></strong> method just let you peek item at the front of the queue without removing the item from the queue:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// peek the front of the queue</span>
</span><span class='line'><span class="n">String</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bigQueue</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>To remove or consume item from the queue, just call the <strong><em>dequeue</em></strong> method, here we dequeue 5 items from the queue:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// dequeue some items </span>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">bigQueue</span><span class="o">.</span><span class="na">dequeue</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>since the queue is a FIFO queue, the number dequeued will be in FIFO order: 0, 1, 2, 3, 4.</p>

<p>To remove all remaining items from the queue, just do like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// dequeue all remaining items</span>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">byte</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="n">bigQueue</span><span class="o">.</span><span class="na">dequeue</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">data</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the queue is empty again, to check it&#8217;s empty, just call <strong><em>isEmpty</em></strong> method:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="n">isEmpty</span> <span class="o">=</span> <span class="n">bigQueue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, when you finish with the queue, just call <strong><em>close</em></strong> method to release resource used by the queue, this is not mandatory, just a best practice, call close will release part of used memory immediately. Usually, you initialize big queue in a try block and close it in the finally block, here is the usage paradigm:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// typical queue initialization and closing paradigm</span>
</span><span class='line'><span class="n">IBigQueue</span> <span class="n">bigQueue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">bigQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigQueueImpl</span><span class="o">(</span><span class="s">&quot;d:/bigqueue/tutorial&quot;</span><span class="o">,</span> <span class="s">&quot;demo&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">bigQueue</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now its your turn to play with the big queue, in this tutorial, I just used very small number of data, but actually the big queue can hold lage amount of data, the total size is only limit by your avaiable disk space, so just try to enqueue and dequeue as much data as you can imagine, also, please review test code of big queue to learn more advanced usage like <a href="https://github.com/bulldog2011/bigqueue/tree/master/src/test/java/com/leansoft/bigqueue/load">multi-threads producing and consuming cases</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Design of A Big, Fast, and Persistent Queue]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/01/23/big-queue-design/"/>
    <updated>2013-01-23T20:55:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/01/23/big-queue-design</id>
    <content type="html"><![CDATA[<h1>Why a Big Queue?</h1>

<p>This is a big data era, we are always facing challenge to find insights in big data. Last time, I have worked on the architecture and design of a large scale logging, tracing, monitoring and analytics platform, the core of the platform is a log collecting system and the core of the collector is a big queue, see figure below:</p>

<!-- more -->


<p><img class="center" src="http://bulldog2011.github.com/images/bigqueue/log_collector.png" width="400" height="400"></p>

<p>The figure above looks like a typical producing and consuming scenario, the big queue works like a broker, at the left side of the queue, there are many agents deployed on application servers, the agents work just like producers, they continuously collect log data on application servers and push them to the big queue, on the right side of the big queue, there are several analysis systems, the analysis systems work just like consumers, they continuously pull log data from the queue, analyze  and store them into the backend. If you are interested in an industrial log collecting product built on this architecture, please refer to <a href="http://kafka.apache.org/">apache kafka</a>.</p>

<p>Queue is a natural fit for log data collecting scenario, by leveraging queue, consumers and producers are decoupled, both sides can work without knowing the existing of other side, consumers and producers can be added or removed as needed without affecting existing ones.</p>

<h1>The Requirements</h1>

<p>Basically, we need the big queue to be:</p>

<ul>
<li><strong>FAST &amp; THREAD SAFE</strong>    <br/>
The system needs to collect logs from more than 1000 production machines, they may produce more than 100,000 logs per second(average size is 1KB), this is equal to more than 100MB per second, if the big queue can’t keep up, logs will be lost. To further improve the throughout, we want all producers and consumers to work concurrently, so the queue needs to work in a thread safe manner, otherwise, there will be data lose or corruption.</li>
<li><strong>BIG &amp; PERSISTENT</strong> <br/>
Daily logs will be at TB level, the queue should have the capacity to store up to one week’s logs,
In case any of the analysis system is down(for example, periodical maintenance or even crash), the queue should continue to store logs for backend system to consume later when they are up again. Also, if the big queue itself is down, the logs already stored should survive since they are persistent, when the queue is up again, it should continue to serve the consumers.</li>
<li><strong>MEMORY EFFICIENT</strong><br/>
Compared with big disk storage, current computer system is still shortage of physical memory, usually, memory will be less than 32GB on a commodity machine. We need the queue to use memory efficiently though it needs to handle logs more than 100MB per second and at TB level daily.</li>
</ul>


<h1>The Design Thinking Flow</h1>

<p>Below is a simple and elegant design of the big queue I come up with to meet the requirements and challenges above:</p>

<p><img class="center" src="http://bulldog2011.github.com/images/bigqueue/bigqueue_abstraction_layers.png" width="300" height="300"></p>

<p>Usually, when I design something, I follow a top-down abstract thinking flow: as I learned in data structure course in college long ago, a queue data structure is usually built on an array data structure, so before I can build a queue I need to build an array first, the array I need should have following characters: first, it should be as fast as in memory access; second, it should be disk backed(hence it will be big and persistent). Seems there is contradiction between these two characters: if you need something fast, you need to put it in memory which is volatile and only has limited capacity, if you need something big and persistent, you need to put it on disk which has much slower access speed than physical memory, is there a technology to resolve these two contradictions? After an intensive research, I finally found memory mapped file which seems a natural bridge between psychical memory and disk, if you need background about memory mapped file, <a href="http://www.kdgregory.com/index.php?page=java.byteBuffer">here</a> and <a href="http://vanillajava.blogspot.co.uk/2012/03/presentation-on-using-shared-memory-in.html">here</a> are two good references. Now let’s continue the top-down thinking flow, before I can build a big array, I need to build a data structure called memory mapped page which can bridge the gap between speed and capacity, at the same time, I need some auxiliary structures to manage mapped pages in a memory efficient way, in the design figure above, these auxiliary structures are called mapped page factory and LRU cache. Whenever big array needs a mapped page, it requests one from the mapped page factory and returns it to the factory when it has done with the page. Mapped page factory encapsulates algorithm to allocate, cache and recycle mapped pages in a memory efficient and thread safe way by leveraging LUR cache structure.</p>

<p>Now, with the design in mind, I can implement these abstract structures in a bottom up, layer by layer approach, you can find the implementation details by studying the open source java code on <a href="https://github.com/bulldog2011/bigqueue">github</a> if you are interested.</p>

<h1>Additional Design Notes:</h1>

<ul>
<li><p>Although I learned some people used to map a single big file into memory, like <a href="http://kdgcommons.svn.sourceforge.net/viewvc/kdgcommons/trunk/src/main/java/net/sf/kdgcommons/buffer/MappedFileBuffer.java?revision=HEAD&amp;view=markup">here</a> and <a href="http://vanillajava.blogspot.com/2011/12/using-memory-mapped-file-for-huge.html">here</a>, I have memory leak concern with such approach(though I am not sure), instead, I came with up a novel pagging and swapping algorithm which only map fixed size(for example, 128M) page file into memory on demand and unmap it when it is not accessed within a fixed time to live(TTL) period. Which such design, I can not only use memory safer and more efficient, but can delete some used pages files to save disk space whenever necessary.</p></li>
<li><p>As we know, queue is a rear append and front read structure, so as long as the queue front page and rear page(technically, this is called working set) are in memory, read and append operations can always happen in memory, that means the enqueue and dequeue operations are always close to O(1) memory access.</p></li>
<li><p>The big queue is based on a <strong>big array</strong> structure, the big array itself is an interesting data structure with some unique features(I plan to write some use cases of this structure in the near future), the big array supports sequential append(called append only array), sequential and random read. Sequential append and read are both O(1) memory access, while random read is O(1) memory access if the corresponding page is in cache, and is O(1) disk access if the corresponding page is not in cache. The big array is index based, just like normal indexed array, starting with index 0, when a new item is appended, the head index will be incremented, index is the pointer to the appended data, later you can use the index to read back the data. The index is of type long, this is a really very big range, I guess the big array won’t be used up before the world is end:).</p></li>
<li><p>Internally, two logical files(phycially one logical file consists of many fixed size page files) are used by one big array, one is index file, the other is data file, when data is read by index, the index will be first mapped to an index page file, then into an item in the index page file, the index item has pointer and length information to the actual data in data file, data can be retrieved by just inspecting index item, load corresponding data page file and read data in it. New data can be appended just by finding out next to be appended data page file and offset, then put the data and update corresponding index item.</p></li>
<li><p>Serialization is outside of the consideration of the big queue framework, the enqueue operation only accepts byte array as input(the dequeue operation only returns byte array), I left out serialization deliberately since I think it should not be the responsibility of the big queue framework, there are many existing and well known serialization frameworks(like protobuf, thrift, etc) which can do serialization work better.</p></li>
<li><p>To ensure thread safe, some multi-threading technologies like read-write lock and thread local buffer are leveraged, the queue can work in read/write separation way – consumer and producer can work concurrently, this tremendously improved the throughput of the queue.</p></li>
<li><p>The queue has interface to delete used page files(for example, if data in these page files have been consumed by consumers) to save disk space, this is called garbage collection on disk files, much like GC in memory.</p></li>
<li><p>Abstractly, the whole queue looks like a huge FIFO circle buffer, disk backed and memory mapped.</p></li>
</ul>


<h1>Performance Test</h1>

<p>Below is the preformance test conclusion:</p>

<ul>
<li>In concurrent producing and consuming case, the average throughput is around <strong><em>166MBps</em></strong>.</li>
<li>In sequential producing then consuming case, the average throughput is around <strong><em>333MBps</em></strong>.</li>
</ul>


<p>Suppose the average message size is 1KB, then big queue can concurrently producing and consuming<br/>
166K message per second on a commodity machine under normal load. Basically, the throughput is only limited by disk IO bandwidth.</p>

<p>The detailed performance test report is <a href="https://github.com/bulldog2011/bigqueue/wiki/Performance-Test-Report">here</a>, the corresponding test program is <a href="https://github.com/bulldog2011/bigqueue/blob/master/src/test/java/com/leansoft/bigqueue/perf/BigQueuePerfTest.java">here</a>, and the full hardware spec for benchmark is <a href="http://bulldog2011.github.com/lab/">here</a>.</p>

<h1>Conclusion</h1>

<p>To resolve a big data challenge I designed and implemented a simple while elegant big queue that is:</p>

<blockquote><ol>
<li><strong>Fast</strong> : close to the speed of direct memory access, both enqueue and dequeue are close to O(1) memory access.</li>
<li><strong>Big</strong> : the total size of the queue data is only limited by the available disk space.</li>
<li><strong>Persistent</strong> : all data in the queue is persisted on disk, and is crash resistant.</li>
<li><strong>Memory-efficient</strong> : automatic paging &amp; swapping algorithm, only most-recently accessed data is kept in memory.</li>
<li><strong>Thread-safe</strong>: multiple threads can concurrently enqueue and dequeue without data corruption.</li>
<li><strong>Simple and Light-weight</strong>: current number of source files is 12 and the library jar is less than 20K.</li>
</ol>
</blockquote>

<p>Log data collecting is just use case of the big queue, I can anticipate the big queue will be used in more scenarios since big data challenges are becoming common these days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/01/23/hello-world/"/>
    <updated>2013-01-23T12:05:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/01/23/hello-world</id>
    <content type="html"><![CDATA[<p>This is just to log the beginning of my blogging era.</p>
]]></content>
  </entry>
  
</feed>
