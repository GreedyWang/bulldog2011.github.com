<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nano | Abstraction Builder]]></title>
  <link href="http://bulldog2011.github.com/blog/categories/nano/atom.xml" rel="self"/>
  <link href="http://bulldog2011.github.com/"/>
  <updated>2013-02-07T21:39:36+08:00</updated>
  <id>http://bulldog2011.github.com/</id>
  <author>
    <name><![CDATA[Bulldog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[schema driven nano binding]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/07/schema-driven-nano-binding/"/>
    <updated>2013-02-07T20:32:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/07/schema-driven-nano-binding</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bulldog2011/nano">Nano</a> is a light weight xml/json binding framework targeting Android platform, in this post, I will show you how to use Nano and the accompanying compiler tool <a href="https://github.com/bulldog2011/mxjc">mxjc</a> together to do schema driven xml or json data binding - similar to the development process using JAXB and XJC.</p>

<!--more-->


<h3>The Big Picture</h3>

<p><img class="center" src="/images/nano/nano-binding.png" width="400" height="400"></p>

<p>A picture is worth a thousand words, a typical schema driven xml data binding development includes two main phases:</p>

<blockquote><ol>
<li><strong><em>Build Time</em></strong> - in this phase, we authorize xml scheam or xsd first, the schema specifies the metadata of our business domain, this is the single source of truth, later code generation all depends on the scheam, only if the scheam changes, then we need to regenerate source code. With schema specified, we use the mxjc schema binding compiler to compile the scheam into Nano bindable classes, mxjc is based on JAXB xjc, so its usage is similar to xjc. Classes generated by mxjc will be annotated with Nano annotations, these annotations specify the mapping between pojo and xml, they will later be scanned by Nano binding framework to guide the real marshalling or unmarshalling at runtime.</li>
<li><strong><em>Runtime time</em></strong> - in this phase, we have Nano bindable domain class in hand, what's left is to do marshalling or unmarshalling according to real needs, by leveraging Nano binding framework. Nano is a middle man between XML/JSON document and java object, when objects or pojos are fed into the Nano binding framework, it can marshall them or serialize them into either XML or JSON content, and when XML or JSON content is fed into the Nano binding framework, it can unmarshall or deserialize them into objects or pojos.</li>
</ol>
</blockquote>

<p>By the way, scheam driven development is good for some scenario with complex business domain, without formal schema and automated code generation, the manual written code base will be very hard to maintain. However, when your use case is simple, it's not necessary to begin with scheam, just write your domian class then annotate with Nano annations is also workable.</p>

<h3>A Zoo Sample</h3>

<p>I've create an ant project to demo the scheam driven developmeng with Nano and mxjc, you can find the project <a href="https://github.com/bulldog2011/nano/tree/master/sample/schema-driven">here</a>, you can download the whole project and run it with Ant(suppose you have Ant installed).</p>

<p>Belew is the Ant build file which includes all scheam driven development stets mentioned above:</p>

<p>``` xml</p>

<p>&lt;?xml version="1.0" standalone="yes"?></p>

<p><project basedir="." default="run">
  <property name="sample.home" value="." />
  <path id="classpath"></p>

<pre><code>&lt;pathelement path="classes" /&gt;
&lt;fileset dir="${sample.home}" includes="lib/mxjc/*.jar" /&gt;
&lt;fileset dir="${sample.home}" includes="lib/nano/*.jar" /&gt;
</code></pre>

<p>  </path>
  <taskdef name="mxjc" classname="com.leansoft.mxjc.MXJCTask"></p>

<pre><code>&lt;classpath refid="classpath" /&gt;
</code></pre>

<p>  </taskdef></p>

<p>  <!--compile Java source files-->
  <target name="compile" description="Compile all Java source files"></p>

<pre><code>&lt;echo message="Compiling the schema..." /&gt;
&lt;mkdir dir="gen-src" /&gt;
&lt;mxjc schema="schema/zoo.xsd" package="com.leansoft.nano.zoo" destdir="gen-src" removeOldOutput="yes"&gt;
  &lt;produces dir="gen-src/com/leansoft/nano/zoo" includes="**/*.java" /&gt;
&lt;/mxjc&gt;
&lt;echo message="Compiling the java source files..." /&gt;
&lt;mkdir dir="classes" /&gt;
&lt;javac destdir="classes" debug="on"&gt;
  &lt;src path="src" /&gt;
  &lt;src path="gen-src" /&gt;
  &lt;classpath refid="classpath" /&gt;
&lt;/javac&gt;
</code></pre>

<p>  </target></p>

<p>  <target name="run" depends="compile" description="Run the sample app"></p>

<pre><code>&lt;echo message="Running the sample application..." /&gt;
&lt;java classname="com.leansoft.nano.sample.ZooExample" fork="true"&gt;
  &lt;classpath refid="classpath" /&gt;
&lt;/java&gt;
</code></pre>

<p>  </target></p>

<p>  <target name="clean" description="Deletes all the generated artifacts."></p>

<pre><code>&lt;delete dir="gen-src" /&gt;
&lt;delete dir="classes" /&gt;
</code></pre>

<p>  </target>
</project></p>

<p>```</p>

<p>mxjc provides an Ant task called MXJCTask, similar to xjc ant task, mxjc ant task can also auto-generate source from scheam driven by Ant.</p>

<p>Following the xml scheam(xsd):</p>

<p>``` xml</p>

<p>&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  &lt;xsd:element name="zoo" type="zooInfo"/>
  &lt;xsd:element name="comment" type="xsd:string"/>
  &lt;xsd:complexType name="zooInfo"></p>

<pre><code>&lt;xsd:sequence&gt;
  &lt;xsd:element name="zooName" type="xsd:string"/&gt;
  &lt;xsd:element name="zooId" type="xsd:int"/&gt;
  &lt;xsd:element name="animals" type="Animals"/&gt;
&lt;/xsd:sequence&gt;
</code></pre>

<p>  &lt;/xsd:complexType></p>

<p>  &lt;xsd:complexType name="Animals"></p>

<pre><code>&lt;xsd:sequence&gt;
  &lt;xsd:element name="animal" minOccurs="1" maxOccurs="unbounded"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:sequence&gt;
        &lt;xsd:element name="animalName" type="xsd:string"/&gt;
        &lt;xsd:element name="animalType" type="xsd:string"/&gt;
      &lt;/xsd:sequence&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
&lt;/xsd:sequence&gt;
</code></pre>

<p>  &lt;/xsd:complexType>
&lt;/xsd:schema></p>

<p>```</p>

<p>The XML document which we are going to read and print in console:</p>

<p>``` xml</p>

<p>&lt;?xml version="1.0"?>
<zoo>
  <zooName>Vandalur Zoo</zooName>
  <zooId>12321</zooId>
  <animals></p>

<pre><code>&lt;animal&gt;
  &lt;animalName&gt;Lion&lt;/animalName&gt;
  &lt;animalType&gt;Wild&lt;/animalType&gt;
&lt;/animal&gt;
&lt;animal&gt;
  &lt;animalName&gt;Dog&lt;/animalName&gt;
  &lt;animalType&gt;Domestic&lt;/animalType&gt;
&lt;/animal&gt;
&lt;animal&gt;
  &lt;animalName&gt;White Tiger&lt;/animalName&gt;
  &lt;animalType&gt;Wild&lt;/animalType&gt;
&lt;/animal&gt;
</code></pre>

<p>  </animals>
</zoo></p>

<p>```</p>

<p>Following is the main java code to read the xml file, output some content, and then write the whole objects into json output.</p>

<p>``` java</p>

<p>package com.leansoft.nano.sample;</p>

<p>import java.io.FileInputStream;
import java.util.List;</p>

<p>import com.leansoft.nano.IReader;
import com.leansoft.nano.IWriter;
import com.leansoft.nano.NanoFactory;
import com.leansoft.nano.zoo.Animals;
import com.leansoft.nano.zoo.ZooInfo;
import com.leansoft.nano.zoo.animals.Animal;</p>

<p>public class ZooExample {</p>

<pre><code>public static void main(String[] args) {
    try {

        IReader xmlReader = NanoFactory.getXMLReader();

        ZooInfo zooInfo = xmlReader.read(ZooInfo.class, new FileInputStream("xml/zoo.xml"));

        System.out.println("Output after xml read - ");
        System.out.println("Zoo Name: " + zooInfo.getZooName());
        System.out.println("Zoo Id: " + zooInfo.getZooId());

        Animals animals = zooInfo.getAnimals();
        List&lt;Animal&gt; animalsList = animals.getAnimal();

        for (Animal animal : animalsList) {
            System.out.println("\t" + animal.getAnimalName());
            System.out.println("\t\t" + animal.getAnimalType());
        }

        IWriter xmlWriter = NanoFactory.getJSONWriter();

        System.out.println("Output after json write - ");
        xmlWriter.write(zooInfo, System.out);


    } catch(Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Output</p>

<p>```</p>

<p>Output after xml read -
Zoo Name: Vandalur Zoo
Zoo Id: 12321</p>

<pre><code>Lion
    Wild
Dog
    Domestic
White Tiger
    Wild
</code></pre>

<p>Output after json write -
{"zoo": {</p>

<pre><code>"animals": {"animal": [
    {
        "animalName": "Lion",
        "animalType": "Wild"
    },
    {
        "animalName": "Dog",
        "animalType": "Domestic"
    },
    {
        "animalName": "White Tiger",
        "animalType": "Wild"
    }
]},
"zooId": 12321,
"zooName": "Vandalur Zoo"
</code></pre>

<p>}}</p>

<p>```</p>

<h3>Conclusion</h3>

<p>When used properly, scheam driven development can greatly improve agaility in development, and just as I have showed in the post, Nano with mxjc supports scheam driven development smoothly, you may tell me that you would rather choose JAXB to do scheam driven development, I admit that JAXB is more mature and feature-rich than Nano, but one cool thing of Nano is it supports Android platform while JAXB does not, Nano is just tailored for Android platform, in later posts, I will show you how to practice scham driven data binding on Android platform, it's facinating, stay tuned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano compare to jaxb]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/06/nano-compare-to-jaxb/"/>
    <updated>2013-02-06T20:44:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/06/nano-compare-to-jaxb</id>
    <content type="html"><![CDATA[<p>I just read an interesting post <a href="http://blog.bdoughan.com/2010/10/how-does-jaxb-compare-to-simple.html">How Does JAXB Compare to Simple</a>, since I have just built a leight-weight xml and json binding framework called <a href="http://github.com/bulldog2011/nano">Nano</a>, in this post I'll run a similar comparison between Nano and JAXB. By the way, since I am a lazy developer, I shamelessly copied much content from that post:), anyway, part of the content of this post should be contributed to the original author of that post.</p>

<!--more-->


<h3>Java Model</h3>

<p>We will use the following model for this example. The classes represent customer data. The get/set methods have been omitted to save space.</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>public class Customer {</p>

<pre><code>private long id;

private String name;

private Address address;

private List&lt;PhoneNumber&gt; phoneNumbers;

public Customer() {
    phoneNumbers = new ArrayList&lt;PhoneNumber&gt;();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>public class Address {</p>

<pre><code>private String city;

private String street;
</code></pre>

<p>}</p>

<p>```</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>public class PhoneNumber {</p>

<pre><code>private String type;

private String number;
</code></pre>

<p>}</p>

<p>```</p>

<h3>Customer Data</h3>

<p>The following instance of Customer will be marshalled to XML using both Nano and JAXB.</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>public class Data {</p>

<pre><code>public static Customer CUSTOMER;

static {
    CUSTOMER = new Customer();
    CUSTOMER.setId(123);
    CUSTOMER.setName("Jane Doe");

    Address address = new Address();
    address.setStreet("1 A Street");
    address.setCity("Any Town");
    CUSTOMER.setAddress(address);

    PhoneNumber workPhoneNumber = new PhoneNumber();
    workPhoneNumber.setType("work");
    workPhoneNumber.setNumber("555-WORK");
    CUSTOMER.getPhoneNumbers().add(workPhoneNumber);

    PhoneNumber cellPhoneNumber = new PhoneNumber();
    cellPhoneNumber.setType("cell");
    cellPhoneNumber.setNumber("555-CELL");
    CUSTOMER.getPhoneNumbers().add(cellPhoneNumber);
}
</code></pre>

<p>}</p>

<p>```</p>

<h3>Marshall Code</h3>

<p>This is the code we will use to convert the objects to XML.</p>

<h4>Nano</h4>

<p>The following code will be used to marshall the instance of Customer to an OutputStream.
The Nano code is quite compact. A little technical details here, the xmlWriter instance got from NanoFactory is thread safe, and unlike JAXB, Nano internally uses an on-demand strategy to scan mapping metadata before real marshalling (and unmarshalling), metadata scan happens once per class, and then the mapping metadata will be cached.</p>

<p>``` java</p>

<p>package com.leansoft.nano.sample;</p>

<p>import com.leansoft.domain.nano.NanoData;
import com.leansoft.nano.IWriter;
import com.leansoft.nano.NanoFactory;</p>

<p>public class NanoDemo {</p>

<pre><code>public static void main(String[] args) throws Exception {
    IWriter xmlWriter = NanoFactory.getXMLWriter();
    xmlWriter.write(NanoData.CUSTOMER, System.out);
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>JAXB</h4>

<p>The following code will be used to marshall the instance of Customer to an OutputStream. A couple of differences are already apparent:</p>

<blockquote><ol>
<li>A JAXBContext needs to be initialized on the binding metadata before the marshal operation can occur. This initialization enables JAXB to optimize how the convertion will be done. The JAXB Context is thread safe and only needs to be created once.</li>
<li>Unlike Nano, JAXB does not format the XML by default, so we will enable this feature.</li>
<li>With no metadata specified we need to supply JAXB with a root element name (and namespace).</li>
</ol>
</blockquote>

<p>``` java</p>

<p>package com.leansoft.nano.sample;</p>

<p>import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.namespace.QName;</p>

<p>import com.leansoft.domain.jaxb.Customer;
import com.leansoft.domain.jaxb.JaxbData;</p>

<p>public class JaxbDemo {</p>

<pre><code>public static void main(String[] args) throws Exception {
    JAXBContext jc = JAXBContext.newInstance(Customer.class);

    Marshaller marshaller = jc.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
    JAXBElement&lt;Customer&gt; jaxbElement = new JAXBElement&lt;Customer&gt;(new QName("customer"), Customer.class, JaxbData.CUSTOMER);
    marshaller.marshal(jaxbElement, System.out);
}
</code></pre>

<p>}</p>

<p>```</p>

<h3>Default XML Output</h3>

<p>First we will examine the XML output produced by both Nano and JAXB if no metadata is used to customize the output.</p>

<h4>Nano</h4>

<p>Nano will only output a root tag if no metadata has been defined</p>

<p>``` xml</p>

<p>&lt;?xml version='1.0' encoding='utf-8' ?>
<customer /></p>

<p>```</p>

<p>We will instruct Nano to marshall fileds by adding @Element annotations on all fields that needs to be marshalled(just as the annotation name implies, @Element indicates that the field will map to xml element):</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import com.leansoft.nano.annotation.Element;</p>

<p>public class Customer {</p>

<pre><code>@Element
private long id;

@Element
private String name;

@Element
private Address address;

@Element
private List&lt;PhoneNumber&gt; phoneNumbers;

public Customer() {
    phoneNumbers = new ArrayList&lt;PhoneNumber&gt;();
}
</code></pre>

<p>}</p>

<p>```</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import com.leansoft.nano.annotation.Element;</p>

<p>public class Address {</p>

<pre><code>@Element
private String city;

@Element
private String street;
</code></pre>

<p>}</p>

<p>```</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import com.leansoft.nano.annotation.Element;</p>

<p>public class PhoneNumber {</p>

<pre><code>@Element
private String type;

@Element
private String number;
</code></pre>

<p>}</p>

<p>```</p>

<p>Now Nano will produce following XML:</p>

<p>``` xml</p>

<p><customer>
  <id>123</id>
  <address></p>

<pre><code>&lt;street&gt;1 A Street&lt;/street&gt;
&lt;city&gt;Any Town&lt;/city&gt;
</code></pre>

<p>  </address>
  <name>Jane Doe</name>
  <phoneNumbers></p>

<pre><code>&lt;number&gt;555-WORK&lt;/number&gt;
&lt;type&gt;work&lt;/type&gt;
</code></pre>

<p>  </phoneNumbers>
  <phoneNumbers></p>

<pre><code>&lt;number&gt;555-CELL&lt;/number&gt;
&lt;type&gt;cell&lt;/type&gt;
</code></pre>

<p>  </phoneNumbers>
</customer></p>

<p>```</p>

<h4>JAXB</h4>

<p>JAXB will produces the followinig XML.</p>

<p>``` xml</p>

<p><customer></p>

<pre><code>&lt;address&gt;
    &lt;city&gt;Any Town&lt;/city&gt;
    &lt;street&gt;1 A Street&lt;/street&gt;
&lt;/address&gt;
&lt;id&gt;123&lt;/id&gt;
&lt;name&gt;Jane Doe&lt;/name&gt;
&lt;phoneNumbers&gt;
    &lt;number&gt;555-WORK&lt;/number&gt;
    &lt;type&gt;work&lt;/type&gt;
&lt;/phoneNumbers&gt;
&lt;phoneNumbers&gt;
    &lt;number&gt;555-CELL&lt;/number&gt;
    &lt;type&gt;cell&lt;/type&gt;
&lt;/phoneNumbers&gt;
</code></pre>

<p></customer></p>

<p>```</p>

<h3>Field Access</h3>

<p>For this example we will configure our XML binding tools to interact directly with the fields(instance variables).</p>

<h4>Nano</h4>

<p>Nano uses field access by default and only supports field access.</p>

<h4>JAXB</h4>

<p>By default JAXB will access public fields and properties. We can configure JAXB to use field access with the following package level annotation:</p>

<p>``` java</p>

<p>@XmlAccessorType(XmlAccessType.FIELD)
package com.leansoft.domain.jaxb;</p>

<p>import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;</p>

<p>```</p>

<h3>Renaming Elements</h3>

<p>Next we will look at how to tweak the XML output using the appropriate mapping metadata. First we will rename some elements. As you will see the amount of configuration requried is almost identical.</p>

<h4>Nano</h4>

<p>For Nano, we will use @Element with a name parameter to configure the phoneNumbers property.</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import com.leansoft.nano.annotation.Element;</p>

<p>public class Customer {</p>

<pre><code>@Element
private long id;

@Element
private String name;

@Element
private Address address;

@Element(name="phone-number")
private List&lt;PhoneNumber&gt; phoneNumbers;

public Customer() {
    phoneNumbers = new ArrayList&lt;PhoneNumber&gt;();
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>JAXB</h4>

<p>For JAXB we will use @XmlRootElement to configure the root element, and @XmlElement to configure the phoneNumbers property.</p>

<p>``` java</p>

<p>package com.leansoft.domain.jaxb;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;</p>

<p>@XmlRootElement
public class Customer {</p>

<pre><code>private long id;

private String name;

private Address address;

@XmlElement(name="phone-number")
private List&lt;PhoneNumber&gt; phoneNumbers;

public Customer() {
    phoneNumbers = new ArrayList&lt;PhoneNumber&gt;();
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>XML Output</h4>

<p>At this point the same XML is being produced by Nano and JAXB.</p>

<p>``` xml</p>

<p><customer></p>

<pre><code>&lt;id&gt;123&lt;/id&gt;
&lt;name&gt;Jane Doe&lt;/name&gt;
&lt;address&gt;
    &lt;city&gt;Any Town&lt;/city&gt;
    &lt;street&gt;1 A Street&lt;/street&gt;
&lt;/address&gt;
&lt;phone-number&gt;
    &lt;type&gt;work&lt;/type&gt;
    &lt;number&gt;555-WORK&lt;/number&gt;
&lt;/phone-number&gt;
&lt;phone-number&gt;
    &lt;type&gt;cell&lt;/type&gt;
    &lt;number&gt;555-CELL&lt;/number&gt;
&lt;/phone-number&gt;
</code></pre>

<p></customer></p>

<p>```</p>

<h3>Change the Order of Elements</h3>

<p>We will tweak the document again to make sure that when marshalling an Address object the "street" element will always appear before the "city" element.</p>

<h4>Nano</h4>

<p>Current Nano framework does not support this feature.</p>

<h4>JAXB</h4>

<p>For JAXB we will use @XmlType to configure the ordering of elements.</p>

<p>``` java</p>

<p>package com.leansoft.domain.jaxb;</p>

<p>import javax.xml.bind.annotation.XmlType;</p>

<p>@XmlType(propOrder={"street", "city"})
public class Address {</p>

<pre><code>private String city;

private String street;
</code></pre>

<p>}</p>

<p>```</p>

<h4>XML Output</h4>

<p>The XML output by JAXB.</p>

<p>``` xml</p>

<p><customer></p>

<pre><code>&lt;id&gt;123&lt;/id&gt;
&lt;name&gt;Jane Doe&lt;/name&gt;
&lt;address&gt;
    &lt;street&gt;1 A Street&lt;/street&gt;
    &lt;city&gt;Any Town&lt;/city&gt;
&lt;/address&gt;
&lt;phone-number&gt;
    &lt;type&gt;work&lt;/type&gt;
    &lt;number&gt;555-WORK&lt;/number&gt;
&lt;/phone-number&gt;
&lt;phone-number&gt;
    &lt;type&gt;cell&lt;/type&gt;
    &lt;number&gt;555-CELL&lt;/number&gt;
&lt;/phone-number&gt;
</code></pre>

<p></customer></p>

<p>```</p>

<h3>Mapping to an Attribute</h3>

<p>Now we will look at how to tweak the XML output using the appropriate mapping metadata to produce XML attributes. As you will see the amount of configuration required is almost identical.</p>

<h4>Nano</h4>

<p>For Nano we will use @Attribute to configure the id property to be represented as an XML attribute.</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import com.leansoft.nano.annotation.Attribute;
import com.leansoft.nano.annotation.Element;</p>

<p>public class Customer {</p>

<pre><code>@Attribute
private long id;

@Element
private String name;

@Element
private Address address;

@Element(name="phone-number")
private List&lt;PhoneNumber&gt; phoneNumbers;

public Customer() {
    phoneNumbers = new ArrayList&lt;PhoneNumber&gt;();
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>JAXB</h4>

<p>For JAXB we will use @XmlAttribute to configure the id property to be represented as an XML attribute.</p>

<p>``` java</p>

<p>package com.leansoft.domain.jaxb;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;</p>

<p>@XmlRootElement
public class Customer {</p>

<pre><code>@XmlAttribute
private long id;

private String name;

private Address address;

@XmlElement(name="phone-number")
private List&lt;PhoneNumber&gt; phoneNumbers;

public Customer() {
    phoneNumbers = new ArrayList&lt;PhoneNumber&gt;();
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>XML Output</h4>

<p>The XML output is the same for both JAXB and Nano.</p>

<p>``` xml</p>

<p><customer id="123"></p>

<pre><code>&lt;name&gt;Jane Doe&lt;/name&gt;
&lt;address&gt;
    &lt;street&gt;1 A Street&lt;/street&gt;
    &lt;city&gt;Any Town&lt;/city&gt;
&lt;/address&gt;
&lt;phone-number&gt;
    &lt;type&gt;work&lt;/type&gt;
    &lt;number&gt;555-WORK&lt;/number&gt;
&lt;/phone-number&gt;
&lt;phone-number&gt;
    &lt;type&gt;cell&lt;/type&gt;
    &lt;number&gt;555-CELL&lt;/number&gt;
&lt;/phone-number&gt;
</code></pre>

<p></customer></p>

<p>```</p>

<h3>Mapping Objects to Simple Content</h3>

<p>To compact our document even further we will map the PhoneNumber class to a complex type with simple content.</p>

<h4>Nano</h4>

<p>With Nano we will use the @Attribute and @Value annotations on the PhoneNumber class.</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import com.leansoft.nano.annotation.Attribute;
import com.leansoft.nano.annotation.Value;</p>

<p>public class PhoneNumber {</p>

<pre><code>@Attribute
private String type;

@Value
private String number;
</code></pre>

<p>}</p>

<p>```</p>

<h4>JAXB</h4>

<p>For JAXB we will use the @XmlAttribute and @XmlValue annotations on the PhoneNumber class.</p>

<p>``` java</p>

<p>package com.leansoft.domain.jaxb;</p>

<p>import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlValue;</p>

<p>public class PhoneNumber {</p>

<pre><code>@XmlAttribute
private String type;

@XmlValue
private String number;
</code></pre>

<p>}</p>

<p>```</p>

<h4>XML Output</h4>

<p>The XML output is the same for both JAXB and Nano.</p>

<p>``` xml</p>

<p><customer id="123"></p>

<pre><code>&lt;name&gt;Jane Doe&lt;/name&gt;
&lt;address&gt;
    &lt;street&gt;1 A Street&lt;/street&gt;
    &lt;city&gt;Any Town&lt;/city&gt;
&lt;/address&gt;
&lt;phone-number type="work"&gt;555-WORK&lt;/phone-number&gt;
&lt;phone-number type="cell"&gt;555-CELL&lt;/phone-number&gt;
</code></pre>

<p></customer></p>

<p>```</p>

<h3>Applying Namespaces</h3>

<p>We will now namespace qualify the XML document.</p>

<h4>Nano</h4>

<p>We will use the @RootElement with a namespace parameter to specify a namespace for the Customer class.</p>

<p>``` java</p>

<p>package com.leansoft.domain.nano;</p>

<p>import java.util.ArrayList;
import java.util.List;</p>

<p>import com.leansoft.nano.annotation.Attribute;
import com.leansoft.nano.annotation.Element;
import com.leansoft.nano.annotation.RootElement;</p>

<p>@RootElement(namespace="http://www.example.com")
public class Customer {</p>

<pre><code>@Attribute
private long id;

@Element
private String name;

@Element
private Address address;

@Element(name="phone-number")
private List&lt;PhoneNumber&gt; phoneNumbers;
</code></pre>

<p>}</p>

<p>```</p>

<h4>JAXB</h4>

<p>We can configure the namespace information using the @XmlScheam package level annotation:</p>

<p>``` java</p>

<p>@XmlAccessorType(XmlAccessType.FIELD)
@XmlSchema(namespace="http://www.example.com",
elementFormDefault=XmlNsForm.QUALIFIED)
package com.leansoft.domain.jaxb;</p>

<p>import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlNsForm;
import javax.xml.bind.annotation.XmlSchema;</p>

<p>```</p>

<h4>XML Output</h4>

<h4>Nano</h4>

<p>``` xml</p>

<p><customer id="123" xmlns="http://www.example.com">
  <address></p>

<pre><code>&lt;street&gt;1 A Street&lt;/street&gt;
&lt;city&gt;Any Town&lt;/city&gt;
</code></pre>

<p>  </address>
  <name>Jane Doe</name>
  <phone-number type="work">555-WORK</phone-number>
  <phone-number type="cell">555-CELL</phone-number></p>

<p>```</p>

<h4>JAXB</h4>

<p>``` xml</p>

<p><customer xmlns:ns2="http://www.example.com" id="123"></p>

<pre><code>&lt;ns2:name&gt;Jane Doe&lt;/ns2:name&gt;
&lt;ns2:address&gt;
    &lt;ns2:street&gt;1 A Street&lt;/ns2:street&gt;
    &lt;ns2:city&gt;Any Town&lt;/ns2:city&gt;
&lt;/ns2:address&gt;
&lt;ns2:phone-number type="work"&gt;555-WORK&lt;/ns2:phone-number&gt;
&lt;ns2:phone-number type="cell"&gt;555-CELL&lt;/ns2:phone-number&gt;
</code></pre>

<p></customer></p>

<p>```</p>

<h3>JSON Support</h3>

<p>It is perferred that a binding framework can produce not only XML but also JSON.</p>

<h4>Nano</h4>

<p>Nano supports this feature, we only need to get a jsonWriter from Nanofactory then do marshalling:</p>

<p>``` java</p>

<p>package com.leansoft.nano.sample;</p>

<p>import com.leansoft.domain.nano.NanoData;
import com.leansoft.nano.IWriter;
import com.leansoft.nano.NanoFactory;</p>

<p>public class NanoDemo {</p>

<pre><code>public static void main(String[] args) throws Exception {
    IWriter xmlWriter = NanoFactory.getXMLWriter();
    xmlWriter.write(NanoData.CUSTOMER, System.out);

    IWriter jsonWriter = NanoFactory.getJSONWriter();
    jsonWriter.write(NanoData.CUSTOMER, System.out);
}
</code></pre>

<p>}</p>

<p>```</p>

<h4>JAXB</h4>

<p>As I know, without external library support, JAXB does not support json binding directly.</p>

<h4>JSON Output</h4>

<p>Below is the json produced by Nano:</p>

<p>``` json</p>

<p>{"customer": {</p>

<pre><code>"@id": 123,
"address": {
    "city": "Any Town",
    "street": "1 A Street"
},
"name": "Jane Doe",
"phone-number": [
    {
        "@type": "work",
        "__value__": "555-WORK"
    },
    {
        "@type": "cell",
        "__value__": "555-CELL"
    }
]
</code></pre>

<p>}}</p>

<p>```</p>

<h3>Android Support</h3>

<p>Android mobile platfrom is quite popular these days, it would be nice if a binding framework can support Android platform.</p>

<h4>Nano</h4>

<p>Nano is tailored for Android platform, I will show you how to use Nano on Android platform in my later posts.</p>

<h4>JAXB</h4>

<p>JAXB does not support Android platform, even if some people made it run on Android, the performance will be very bad since JAXB a heavy weight enterprise library targeting desktop and server side development, not mobile development.</p>

<h3>Summary</h3>

<p>Both Nano and JAXB are quite easy to do simple binding stuff. If you need a mature binding framework for enterprise development, JAXB is the way to go; If you just need a light-weight alternative, or you need to do binding work on Android platform, Nano is definitely the way to go.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano list tutorial]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/05/nano-list-tutorial/"/>
    <updated>2013-02-05T21:12:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/05/nano-list-tutorial</id>
    <content type="html"><![CDATA[<p>In this tutorial, I will show you how to marshall and unmarshall list of objects using Nano binding framework.</p>

<!--more-->


<h3>1. Create Bean Class</h3>

<p>Create a new Book class like below:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.RootElement</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@RootElement</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;book&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Element</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Element</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Element</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">publisher</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Element</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getAuthor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAuthor</span><span class="o">(</span><span class="n">String</span> <span class="n">author</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">author</span> <span class="o">=</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getPublisher</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">publisher</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPublisher</span><span class="o">(</span><span class="n">String</span> <span class="n">publisher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">publisher</span> <span class="o">=</span> <span class="n">publisher</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getIsbn</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIsbn</span><span class="o">(</span><span class="n">String</span> <span class="n">isbn</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">isbn</span> <span class="o">=</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Book [name=&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;, author=&quot;</span> <span class="o">+</span> <span class="n">author</span> <span class="o">+</span> <span class="s">&quot;, publisher=&quot;</span>
</span><span class='line'>            <span class="o">+</span> <span class="n">publisher</span> <span class="o">+</span> <span class="s">&quot;, isbn=&quot;</span> <span class="o">+</span> <span class="n">isbn</span>  <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is simple bean class containing Nano annotations, indicating this is a Nano bindable class. When a top level class is annotated with @RootElement, then its instance maps to XML element, in our case &lt;book&gt; tag. At field level, all fields of Book are annotated with @Element, indicating these fileds map to XML elements.</p>

<h3>2. Create Container Class to Hold List of Objects</h3>

<p>Now we need to create a new Class "Books.java" as container to hold the list of Book objects by having an ArrayList instance in our class:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Books</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Element</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;book&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">private</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Books</span><span class="o">()</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">Books</span><span class="o">(</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">books</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">books</span> <span class="o">=</span> <span class="n">books</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">getBooks</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">books</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setBooks</span><span class="o">(</span><span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">books</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">books</span> <span class="o">=</span> <span class="n">books</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Just annotate the books field with @Element annotation, then Nano framework will handle list marshalling or unmarshalling automatically for us.</p>

<h3>3. Create a Java Main Client</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.FileOutputStream</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">com.leansoft.nano.IReader</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.IWriter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.NanoFactory</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;/&lt;</span><span class="n">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="n">A</span> <span class="n">demo</span> <span class="n">show</span> <span class="n">Nano</span> <span class="n">list</span> <span class="n">handling</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="nd">@author</span> <span class="n">bulldog</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListExample</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Book</span> <span class="n">bookOne</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Book</span><span class="o">();</span>
</span><span class='line'>    <span class="n">bookOne</span><span class="o">.</span><span class="na">setAuthor</span><span class="o">(</span><span class="s">&quot;Kathy Sierra&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bookOne</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;SCJP&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bookOne</span><span class="o">.</span><span class="na">setPublisher</span><span class="o">(</span><span class="s">&quot;Tata McGraw Hill&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bookOne</span><span class="o">.</span><span class="na">setIsbn</span><span class="o">(</span><span class="s">&quot;856-545456736&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Book</span> <span class="n">bookTwo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Book</span><span class="o">();</span>
</span><span class='line'>    <span class="n">bookTwo</span><span class="o">.</span><span class="na">setAuthor</span><span class="o">(</span><span class="s">&quot;Christian Bauer&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bookTwo</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;Java Persistence with Hibernate&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bookTwo</span><span class="o">.</span><span class="na">setPublisher</span><span class="o">(</span><span class="s">&quot;Manning&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bookTwo</span><span class="o">.</span><span class="na">setIsbn</span><span class="o">(</span><span class="s">&quot;978-3832180577&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">bookList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="n">bookList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bookOne</span><span class="o">);</span>
</span><span class='line'>    <span class="n">bookList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bookTwo</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Books</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Books</span><span class="o">();</span>
</span><span class='line'>    <span class="n">books</span><span class="o">.</span><span class="na">setBooks</span><span class="o">(</span><span class="n">bookList</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLWriter</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">books</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">&quot;books.xml&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IReader</span> <span class="n">xmlReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLReader</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">books</span> <span class="o">=</span> <span class="n">xmlReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">Books</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="s">&quot;books.xml&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">books</span><span class="o">.</span><span class="na">getBooks</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><ol>
<li>In the main method, we create two Book objects and store them in an ArrayList, then we create a Books container object and put the book list into it.</li>
<li>We use a Nano xml writer instance to write the Books object to an xml file.</li>
<li>We use a Nano xml reader instance to read the xml file back into Books object.</li>
<li>Finally, we print the list of books(which will eventually call toString() on Book object).</li>
</ol>
</blockquote>

<h3>4. Output</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Book [name=SCJP, author=Kathy Sierra, publisher=Tata McGraw Hill, isbn=856-545456736], Book [name=Java Persistence with Hibernate, author=Christian Bauer, publisher=Manning, isbn=978-3832180577]]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Refesh your project in IDE(eclipse in my case) to see the generated XML file:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;?xml version='1.0' encoding='utf-8' ?>
</span><span class='line'>&lt;books>
</span><span class='line'>  &lt;book>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;author&gt;Kathy Sierra&lt;/author&gt;
</span><span class='line'>&lt;isbn&gt;856-545456736&lt;/isbn&gt;
</span><span class='line'>&lt;name&gt;SCJP&lt;/name&gt;
</span><span class='line'>&lt;publisher&gt;Tata McGraw Hill&lt;/publisher&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;/book>
</span><span class='line'>  &lt;book>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>&lt;author&gt;Christian Bauer&lt;/author&gt;
</span><span class='line'>&lt;isbn&gt;978-3832180577&lt;/isbn&gt;
</span><span class='line'>&lt;name&gt;Java Persistence with Hibernate&lt;/name&gt;
</span><span class='line'>&lt;publisher&gt;Manning&lt;/publisher&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;/book>
</span><span class='line'>&lt;/books>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>5. Project Source</h3>

<p>You can get the whole source of this project <a href="https://github.com/bulldog2011/nano/tree/master/sample/nanolist">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nano hello world]]></title>
    <link href="http://bulldog2011.github.com/blog/2013/02/05/nano-hello-world/"/>
    <updated>2013-02-05T18:35:00+08:00</updated>
    <id>http://bulldog2011.github.com/blog/2013/02/05/nano-hello-world</id>
    <content type="html"><![CDATA[<p><strong><em>Nano</em></strong> is my light-weight xml/json binding framework, it is a light-weight alternative to JAXB. Both Nano and JAXB are annotation driven, you annotate your domain classes, then use Nano or JAXB to convert Java POJO to/from XML.Two highlights of Nano are :</p>

<blockquote><ol>
<li>Tailored for Android platform.</li>
<li>Support both xml and json binding.</li>
</ol>
</blockquote>

<p>In this tutorial, I will show you simple usage of Nano in normal Java environment, in later posts, I will show you how to use Nano on Androd platform.</p>

<!--more-->


<h4>Basic concepts:</h4>

<blockquote><ol>
<li>Marshalling or Serialization - Convert a Java object into a Xml or Json content.</li>
<li>Unmarshalling or Deserialization - Convert Xml or Json content to a Java object.</li>
</ol>
</blockquote>

<h4>Prerequisite:</h4>

<blockquote><ol>
<li>JDK 1.6 or above</li>
<li>Nano 0.6.1 or above</li>
</ol>
</blockquote>

<p>Working with Nano is easy, just annotate your domain class with Nano annotations, later use nanoWriter.write() or nanoReader.read() to do the object / Xml(or Json) conversion.</p>

<h3>1. Nano Dependency</h3>

<p>Nano 0.6.2 can be downloaded <a href="https://github.com/bulldog2011/bulldog-repo/raw/master/repo/releases/com/leansoft/nano/0.6.2/nano-0.6.2-all.zip">here</a>, extract the zip file, and put all 3 jars in lib folder on your project classpath.<br/>
<strong><em>Note</em></strong>:<br/>
On normal Java platform, Nano depends on Kxml and org.json library, however, on Android, Nano has no such dependency, since Kxml and org.json are built in Android Platform.</p>

<h3>2. Nano Annotation</h3>

<p>For object that needs to be converted to / from XML file, it has to be annotated with Nano annotations. The annotations are pretty self-explanatory, see sample below:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">leansoft</span><span class="o">.</span><span class="na">nano</span><span class="o">.</span><span class="na">sample</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Attribute</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.Element</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.leansoft.nano.annotation.RootElement</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@RootElement</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Element</span>
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Element</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Attribute</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;[name=&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span><span class="s">&quot;, age=&quot;</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">&quot;, id=&quot;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>On class level, RootElement(optional) annotation indicates that this class is Nano bindable, on field level, Element annotation indicates that this field maps to an Xml element, Attribute annotation indicates that this filed maps to an Xml attribute.<br/>
<strong><em>Note</em></strong><br/>
field level annotations can only be used on fields(private is ok), not on getter or setter methods.</p>

<h3>3. Convert Object to Xml or Json</h3>

<p>Instantiate an object, get an Xml or Json writer instance from NanoFactory class, then write the object to output(file, console or plain string).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Customer</span> <span class="n">customer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="o">();</span>
</span><span class='line'><span class="n">customer</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'><span class="n">customer</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;bulldog&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">customer</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">30</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Marshalling</span>
</span><span class='line'><span class="k">try</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">File</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.xml&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// for pretty output</span>
</span><span class='line'><span class="n">Format</span> <span class="n">format</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Format</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="n">IWriter</span> <span class="n">xmlWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLWriter</span><span class="o">(</span><span class="n">format</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">xmlFile</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;xml output : &quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">xmlWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">File</span> <span class="n">jsonFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.json&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">IWriter</span> <span class="n">jsonWriter</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getJSONWriter</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">jsonWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">jsonFile</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;json output : &quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">jsonWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">customer</span><span class="o">,</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>xml output :
</span><span class='line'>&lt;?xml version='1.0' encoding='utf-8' ?>
</span><span class='line'>&lt;customer id="100">
</span><span class='line'>  &lt;age>30&lt;/age>
</span><span class='line'>  &lt;name>bulldog&lt;/name>
</span><span class='line'>&lt;/customer>
</span><span class='line'>json output :
</span><span class='line'>{"customer":{"@id":100,"age":30,"name":"bulldog"}}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>4. Convert XML or JSON back to Object</h3>

<p>Get an Xml or Json reader instance from NanoFactory class, then read content(has just been written above) back into object instance.<br/>
Note that when you read back, you need to explictly tell Nano the target class name.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Unmarshalling</span>
</span><span class='line'><span class="k">try</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">File</span> <span class="n">xmlFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.xml&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">IReader</span> <span class="n">xmlReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getXMLReader</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">customer</span> <span class="o">=</span> <span class="n">xmlReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">Customer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">xmlFile</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;customer read from xml : &quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customer</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">File</span> <span class="n">jsonFile</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;D:\\custom_file.json&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">IReader</span> <span class="n">jsonReader</span> <span class="o">=</span> <span class="n">NanoFactory</span><span class="o">.</span><span class="na">getJSONReader</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">customer</span> <span class="o">=</span> <span class="n">jsonReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">Customer</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">jsonFile</span><span class="o">));</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;customer read from json : &quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">customer</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Output
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>customer read from xml :
</span><span class='line'>[name=bulldog, age=30, id=100]
</span><span class='line'>customer read from json :
</span><span class='line'>[name=bulldog, age=30, id=100]&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>5. Now Your Turn</h3>

<p>The usage of Nano can't be simpler, now it's your turn to try Nano framework, if necessary, you can find the whole source of this tutorial <a href="https://github.com/bulldog2011/nano/tree/master/sample/helloworld">here</a>.</p>
]]></content>
  </entry>
  
</feed>
